{
    "noteId": 1,
    "title": "title",
    "folder": "folder",
    "createdAt": "2024-11-25 16:37:04",
    "duration": "01:00:36",
    "content": {
        "script": [
            {
                "text": "어떤 식으로 이제 이동을 하고 돌리고 이럴 건지 그러고 이제 이거를 정합을 할 때 발기 값 기반으로 특징 기반으로",
                "speaker": "Speaker 1",
                "timestamp": "00:00:00"
            },
            {
                "text": "그리고 이제 표면 작업을 할 때 세 가지 방법에 대해서 이제 간략하게 설명을 드릴게요.",
                "speaker": "Speaker 1",
                "timestamp": "00:00:08"
            },
            {
                "text": "영상 정합이랑 이제 저번 시간에도 이제 그것도 했었죠 스티칭도 했었죠 유사해요. 영상 매칭 영상 정합",
                "speaker": "Speaker 1",
                "timestamp": "00:00:14"
            },
            {
                "text": "뭐 이런 식으로 해가지고 영상 두 개를 비교를 해가지고 이제 같은 영역에 대해서 이제 맹킹을 하고",
                "speaker": "Speaker 1",
                "timestamp": "00:00:24"
            },
            {
                "text": "2차원 3차원에서 같은 영역 아니면은 이제 유사한 영역",
                "speaker": "Speaker 1",
                "timestamp": "00:00:30"
            },
            {
                "text": "두 영상이 완전히 똑같을 수도 있는데 여러분들이 예시를 만들면 똑같을 수도 있는데",
                "speaker": "Speaker 1",
                "timestamp": "00:00:35"
            },
            {
                "text": "보통 기본적으로 영상 두 개가 똑같기가 힘들어요. 그러니까 유사한 영역을 이제 찾아가지고 두 개에 대해서 이제 매핑을 한다라고 보시면 될 것 같아요.",
                "speaker": "Speaker 1",
                "timestamp": "00:00:41"
            },
            {
                "text": "그래서 이제 그 대응 관계 이 매핑된 좌표점이 어떻게 이동을 해야 되는지 그 관계를 파악하는 기술이라고 보면 될 것 같아요.",
                "speaker": "Speaker 1",
                "timestamp": "00:00:50"
            },
            {
                "text": "그래서 일단 예시를 들어드리면 지금 왼쪽에 여성의 이미지가 있고",
                "speaker": "Speaker 1",
                "timestamp": "00:01:01"
            },
            {
                "text": "우측에는 어린아이의 이미지를 좀 이제 웃기게 과장되게 변형을 시켜놓은 게 있어요. 이거를 가지고서는 이제 여성의 이미지를",
                "speaker": "Speaker 1",
                "timestamp": "00:01:07"
            },
            {
                "text": "이 과장되게 변한 이미지에 맞춰서 이제 변형을 하는 디폼 형태가 들어갈 거예요. 그래서 이제 여기서는 이제 사용자의 입력이 들어갔어요.",
                "speaker": "Speaker 1",
                "timestamp": "00:01:17"
            },
            {
                "text": "그래서 이제 그 매핑되는 부분을 이제 사용자가 직접 입력을 해준 거예요. 그래서 눈 끝의 점들 코 위에",
                "speaker": "Speaker 1",
                "timestamp": "00:01:27"
            },
            {
                "text": "그리고 호흡 점 그리고 유술 점들을 이제 직접 매핑을 해줘가지고 이게 어떤 식으로 변형이 이루어져야 되는지 그거에 대해서 이제 직접",
                "speaker": "Speaker 1",
                "timestamp": "00:01:36"
            },
            {
                "text": "사용자가 입력을 주면 이런 식으로 여성의 이미지도 이 이미지처럼 따라서 이렇게 변형이 될 수 있다라는 걸 보여드린 거예요.",
                "speaker": "Speaker 1",
                "timestamp": "00:01:45"
            },
            {
                "text": "그래서 이제 매핑 함수에 대해서 이제 간략하게 설명드리면 이게",
                "speaker": "Speaker 1",
                "timestamp": "00:01:56"
            },
            {
                "text": "안구에 대한 이미지일 거예요. 아무래도 이게 안구에 대한 이미지라서 이제 내부에 혈관이나 이런 구조가 보이는 거고 이제 이거에 대해서 이제 유사점에 대해서",
                "speaker": "Speaker 1",
                "timestamp": "00:02:03"
            },
            {
                "text": "이 매핑을 하면서 주고 이 매핑에 대해서 이 관계를 이제 수학적으로 나타낼 수 있는 게 이제 매핑 함수라고 보시면 될 것 같아요.",
                "speaker": "Speaker 1",
                "timestamp": "00:02:13"
            },
            {
                "text": "그래서 이제 각각에 대해서 이제 트랜슬레이션 되는",
                "speaker": "Speaker 1",
                "timestamp": "00:02:23"
            },
            {
                "text": "요거 이동되는 거 이동되는 거 이제 로테이션 되는 거 이런 식으로 해가지고 이런 식으로 수학적으로 간략하게 어느 정도 나타내서",
                "speaker": "Speaker 1",
                "timestamp": "00:02:29"
            },
            {
                "text": "이제 매핑 함수다라고 이제 표현한다라고 보시면 될 것 같아요. 이제 영상의 구성 요소인데 이게 영상을 이제 어떤 형태로 볼지",
                "speaker": "Speaker 1",
                "timestamp": "00:02:36"
            },
            {
                "text": "보는 거예요. 단순하게 픽셀 이미지 하나씩 포인트로 볼 건지 아니면은 그거를 이제 다각형으로 볼 건지",
                "speaker": "Speaker 1",
                "timestamp": "00:02:46"
            },
            {
                "text": "그래서 3차 원이면 기본적으로 삼각형 형태로 보기도 하죠. 이미지 자체를 삼각형의 다각형으로 이렇게 이루어져 가지고 그거를 이동시키고 하죠. 그래서 다각형으로 보기도 하고",
                "speaker": "Speaker 1",
                "timestamp": "00:02:53"
            },
            {
                "text": "픽셀 그냥 영상 대 영상으로 했을 때 단순하게 픽셀로 하기도 하고 그리고 이제 이거를 기하학적으로 변환할 때 강체냐 비강체냐 할까 그 이미지 자체에 변형이 들어갈 건지",
                "speaker": "Speaker 1",
                "timestamp": "00:03:06"
            },
            {
                "text": "변형이 안 들어가는 강체를 할 건지 변형이 들어가는 비강체를 할 건지 아까 전에 그 얼굴 많이 읽어지는 거 봤었죠? 그거 같은 걸 이제 비강체라고 표현하면 될 것 같아요.",
                "speaker": "Speaker 1",
                "timestamp": "00:03:19"
            },
            {
                "text": "지품 자체가 크게 이루어진 그리고 밝기값 변화는 이제 들어가는 모델을 선형으로 할 건지 아니면 차원 차원인 함수를 이용해서 보관을 할 건지 정도라고 보시면 될 것 같고",
                "speaker": "Speaker 1",
                "timestamp": "00:03:29"
            },
            {
                "text": "그다음에 오차 측정을 할 때 이제 아까 전에 밝기값 기반으로 할 건지 이제 뉴얼 인포메이션 값으로 할 건지 뒷부분에 하고 있겠지만",
                "speaker": "Speaker 1",
                "timestamp": "00:03:44"
            },
            {
                "text": "그런 걸로 할 건지 이제 오차 측정 기준은 어떤 걸로 해서 두 개의 영상을 비교를 해서 이게 매핑이 되는지 안 됐는지 확인을 하는 척도로",
                "speaker": "Speaker 1",
                "timestamp": "00:03:53"
            },
            {
                "text": "이제 쓸 건지 어느 거를 쓸 건지 그리고 이제 이제 제안한다는 건 그래서 여러분들이 이제",
                "speaker": "Speaker 1",
                "timestamp": "00:04:02"
            },
            {
                "text": "여기만큼은 정말 중요한 부분이야. 그래서 이 부분은 이동되지 않고 그 부분을 고정시켰으면 좋겠다라고 이제 설정을 할 수도 있거든요 그 특정 부위를",
                "speaker": "Speaker 1",
                "timestamp": "00:04:09"
            },
            {
                "text": "그래서 그 부위를 기준으로 여기는 고정되고 이렇게 막 물체를 움직이는 식으로 할 수도 있으니까 이제 제안을 풀 건지 안 풀 건지",
                "speaker": "Speaker 1",
                "timestamp": "00:04:19"
            },
            {
                "text": "그러고 이제 이거를 지역적으로 할 건지 아니면은 영상 전체에 대해서 적용을 할 건지 그거에 대해서 알고리즘",
                "speaker": "Speaker 1",
                "timestamp": "00:04:27"
            },
            {
                "text": "최적하는 알고리즘 그리고 이제 수렴 조건을 어떻게 어느 정도 맞췄을 때 여러분들이 이제",
                "speaker": "Speaker 1",
                "timestamp": "00:04:35"
            },
            {
                "text": "더 이상 정합을 끝내겠다라고 이제 조건을 어떤 식으로 줄 건지 몇 회 이상으로 횟수로 할 건지 아니면 그 두 개의 영상 차를 구했을 때 그거를 일정 값 이하가 됐을 때 그만두게 할 건지 등등",
                "speaker": "Speaker 1",
                "timestamp": "00:04:42"
            },
            {
                "text": "그걸 이제 수렴 조건으로 해서 여러분들이 이제 영상 정합을 할 때 사용한다라고 보시면 될 것 같아요. 그래서 이제 단순하게 이제 이미지화 시켜서 이제",
                "speaker": "Speaker 1",
                "timestamp": "00:04:56"
            },
            {
                "text": "프로세스를 보면 이제 고정된 이미지에 움직이는 이미지 이거 자체가 이제 움직이면서 고정된 이미지에 이제 조금씩 맞춰간다고 보시면 될 것 같아요.",
                "speaker": "Speaker 1",
                "timestamp": "00:05:06"
            },
            {
                "text": "그래서 움직이는 이미지를 이제 움직일 때 보간 이제 보간은 뒷부분에 설명을 하겠지만 이제 움직일 때 이제 조금씩 움직이면서 이제",
                "speaker": "Speaker 1",
                "timestamp": "00:05:14"
            },
            {
                "text": "영상 전체가 일단 정수 값으로 돼 있잖아요. 보통 XY 값으로 해가지고 정수 값으로 돼 있는데 이제 그 정수 값에 이제 실수 부위는 어떻게 될 거야",
                "speaker": "Speaker 1",
                "timestamp": "00:05:23"
            },
            {
                "text": "하면서 그 부분도 보관을 하면서 이제 영상 전체를 움직이면서 이제 유사한지 그거를 비교를 해요. 그래서",
                "speaker": "Speaker 1",
                "timestamp": "00:05:32"
            },
            {
                "text": "그 유사한지 비교를 하고 그거에 대해서 이제 계속 이 유사한 게 비교를 하는 거 계속 이제",
                "speaker": "Speaker 1",
                "timestamp": "00:05:40"
            },
            {
                "text": "비교를 하는 값들을 비교해 면서 이제 그 변환 값이 어떻게 되는지 이제 최적화되는 걸 진행을 하고 그러고 이제",
                "speaker": "Speaker 1",
                "timestamp": "00:05:47"
            },
            {
                "text": "변환 값들을 최종으로 뽑아가지고 이제 변환을 적용하고 또 다시 이제 이걸 무한 반복하면서 영상을 맞춰 나간다고 보시면 될 것 같아요. 계속 반복하면서",
                "speaker": "Speaker 1",
                "timestamp": "00:05:56"
            },
            {
                "text": "그래서 이제 행렬로 이제 표현을 하면 이제 트랜슬레이션 하는 부분 이제",
                "speaker": "Speaker 1",
                "timestamp": "00:06:09"
            },
            {
                "text": "이동하는 이 트랜스레이션 하는 부분 이제 로테이션하는 부분 이게 스케일 이거는 스케일인데 그다음에 스케일하고 똑같이 나와 있는데 어쨌든",
                "speaker": "Speaker 1",
                "timestamp": "00:06:19"
            },
            {
                "text": "이런 식으로 하면서 이제 행렬로 표현이 가능하다라고 보시면 될 것 같아요. 그래서 이제 회전을 행렬로 표현하면 많이 익숙한 값이죠 그래서",
                "speaker": "Speaker 1",
                "timestamp": "00:06:28"
            },
            {
                "text": "이걸 이용해 가지고 이제 이 세트 값을 구해가지고 여기 날파로 되있는",
                "speaker": "Speaker 1",
                "timestamp": "00:06:38"
            },
            {
                "text": "일단 이거 셋 셋 알파 값을 구해가지고 이게 얼마나 회전이 이루어졌는지 그거를 구한다고 보시면 될 것 같아요.",
                "speaker": "Speaker 1",
                "timestamp": "00:06:43"
            },
            {
                "text": "그래서 측정할 때 쓴다. 그러고 이제 어파인 변환이라고 해가지고 아까 전에",
                "speaker": "Speaker 1",
                "timestamp": "00:06:53"
            },
            {
                "text": "말씀드렸었던 그거에서 이제 최대한 이제 오파인하게 이제",
                "speaker": "Speaker 1",
                "timestamp": "00:07:01"
            },
            {
                "text": "변환을 하는 건데 일단 그 형태 자체를 크게 변화를 하지 않고 이제",
                "speaker": "Speaker 1",
                "timestamp": "00:07:06"
            },
            {
                "text": "이동 회전 확장 전단 정도로만 적용을 해가지고 이미지 자체를 이제 이미지나 아니면은 복셉의 오브젝트 자체를 이제 조금씩 맞춰나간다고 보시면 될 것 같고요.",
                "speaker": "Speaker 1",
                "timestamp": "00:07:11"
            },
            {
                "text": "그래서 이제 평행선은 평행해야 되고 각 선의 비율도 유지돼야 된다. 이 정도로만 기억하시면 될 것 같아요. 그래서",
                "speaker": "Speaker 1",
                "timestamp": "00:07:22"
            },
            {
                "text": "영상 자체가 영상으로 2 차원에서 따지면 영상 자체가",
                "speaker": "Speaker 1",
                "timestamp": "00:07:28"
            },
            {
                "text": "크게 훼손되지 않는 방향으로 해가지고 맞춰 나간다. 그래서 확률로 표현이 가능하다 정도 보시면 될 것 같아요.",
                "speaker": "Speaker 1",
                "timestamp": "00:07:32"
            },
            {
                "text": "그래서 이제 매트릭스로 나타내면 이런 식으로 나타낼 수 있는데 그럼 이런 식이 있다 정도만 기억하시면 될 것 같아요. 그래서 아까 전에 회전으로 했을 땐 이 부분",
                "speaker": "Speaker 1",
                "timestamp": "00:07:41"
            },
            {
                "text": "이 대해서 회전 값에 대해서 나타내질 거고",
                "speaker": "Speaker 1",
                "timestamp": "00:07:51"
            },
            {
                "text": "그러고 확장이 되면은 이 부분 이 x 값과 y 값에 대해서 이제 스케일이 들어가서 얼마큼 커지거나 작아질지",
                "speaker": "Speaker 1",
                "timestamp": "00:07:54"
            },
            {
                "text": "그걸 곱해가지고 PX py에 곱한다고 보시면 될 것 같아요. 스프레이 값이 그러고",
                "speaker": "Speaker 1",
                "timestamp": "00:08:02"
            },
            {
                "text": "여기 뒷부분에 이 t1 t2가 트랜스레이션의 값을 이제 얼마만큼 이제 x y 값으로 얼마만큼 이동할 건지",
                "speaker": "Speaker 1",
                "timestamp": "00:08:09"
            },
            {
                "text": "t1이 이거 x만큼 y만큼 얼마만큼 이동할 건지 트랜스레이션 값이라고 보시면 될 것 같아요. 이 뒷 부분 맨 뒤에 티원 티터는",
                "speaker": "Speaker 1",
                "timestamp": "00:08:18"
            },
            {
                "text": "그래서 이제 유사 이제 전단이라고 이제 아까 전에 말씀드렸던 여기 전단 시어링이라는 거에 이제 추가적으로 설명을 드리면",
                "speaker": "Speaker 1",
                "timestamp": "00:08:28"
            },
            {
                "text": "다른 거는 다 익숙하죠 저희가 그동안 뭐 트랜스레이션 로테이션 뭐 이런 게 근데 전단이라는 개념이 이제 PX에다가",
                "speaker": "Speaker 1",
                "timestamp": "00:08:37"
            },
            {
                "text": "apy를 더해가지고 x 값에 대해서 이제 apy를 더해주는 추가적으로 더 해주는 게 될 거예요. 그래가지고 자체적으로 이제",
                "speaker": "Speaker 1",
                "timestamp": "00:08:46"
            },
            {
                "text": "영상을 이제 회전을 시킨다고 보시면 될 것 같아요. 그래서 이게 좌표 값이 있는데 y 값이 커질수록 x 축으로 지금 회전이 들어가고 있죠",
                "speaker": "Speaker 1",
                "timestamp": "00:08:56"
            },
            {
                "text": "엑 쪽으로 붙어서 더 달라붙어 이제 가게 되겠죠 지금 원래는 이미지가 이렇게 돼 있다고 하면 이제",
                "speaker": "Speaker 1",
                "timestamp": "00:09:05"
            },
            {
                "text": "a 만큼 추가적으로 이렇게 계속 이동을 하면서 x 축으로 붙여준다라고 보시면 될 것 같아요. 그래서 x 축으로 회전이 조금씩 들어간다.",
                "speaker": "Speaker 1",
                "timestamp": "00:09:13"
            },
            {
                "text": "이게 a 값이 이제 a 값이 커지고 y 값이 커질수록 그만큼 이제 움직이는 게 점점 더 커지니까 이 올라가.",
                "speaker": "Speaker 1",
                "timestamp": "00:09:22"
            },
            {
                "text": "그래서 이번에는 py에 대해서 p, p b PX를 이번에 더 해주는 걸로 해서",
                "speaker": "Speaker 1",
                "timestamp": "00:09:32"
            },
            {
                "text": "이번에는 아까 전에 x 축으로 회전이 들어갔다고 하면 이제 y 축을 기준으로 이 부분으로 이제 조금씩 가까워지면서 회전이 들어간다라고 보시면 될 것 같아요.",
                "speaker": "Speaker 1",
                "timestamp": "00:09:42"
            },
            {
                "text": "개념 자체는 그렇게 어려운 개념들은 아니에요. 그래서",
                "speaker": "Speaker 1",
                "timestamp": "00:09:54"
            },
            {
                "text": "이 커질수록 조금씩 와 축이 돼서 이제 부 터지면서 회전이 들어가고 있다라고 저는 보시면 될 것 같아요.",
                "speaker": "Speaker 1",
                "timestamp": "00:09:57"
            },
            {
                "text": "그래서 이제 변한 인자가 이런 식으로 6개가 있고 이제",
                "speaker": "Speaker 1",
                "timestamp": "00:10:09"
            },
            {
                "text": "로테이션과 로테이션을 나타내는 부분 트랜슬레이션을 나타나는 부분 그리고 이 부분에 복샘을 통해가지고 추가적으로",
                "speaker": "Speaker 1",
                "timestamp": "00:10:14"
            },
            {
                "text": "이제 스케일 부분까지 고려할 수 있게 그러고 아까 전에 그 앞부분에 나왔었던 이 부분",
                "speaker": "Speaker 1",
                "timestamp": "00:10:22"
            },
            {
                "text": "이제 추가적으로 해가지고 여러분들이 상수 해서 이제",
                "speaker": "Speaker 1",
                "timestamp": "00:10:29"
            },
            {
                "text": "전단까지 적용을 할 수 있게 이런 식으로 6개의 임자를 가지고서 변환을 들어간다라고 보시면 될 것 같아요.",
                "speaker": "Speaker 1",
                "timestamp": "00:10:34"
            },
            {
                "text": "그래서 아까 전에 이제 이제 폼 이번에는 이제 디폼 하는 부분 아까 전에 그 얼굴 이미지 봤었죠",
                "speaker": "Speaker 1",
                "timestamp": "00:10:42"
            },
            {
                "text": "얼굴이 이제 괴상하게 많이 변할 수 있는 그걸 이제 박판 스플라이를 이제 적용하는 이미지거든요. 그게 이제",
                "speaker": "Speaker 1",
                "timestamp": "00:10:51"
            },
            {
                "text": "변형이 들어간 부분이라고 보시면 될 것 같아요. 그래서 편미분으로 했을 때 이제 바탕에 스플라이 이 부분들이 이제",
                "speaker": "Speaker 1",
                "timestamp": "00:10:59"
            },
            {
                "text": "이 변형 디폼이 들어가는 부분은 좀 많이 어려운 부분이에요. 이 부분 개념들이 이제 보시면은 이제 막 육체 역할까지 들어가고",
                "speaker": "Speaker 1",
                "timestamp": "00:11:07"
            },
            {
                "text": "이제 어떻게 변화할 건지 그거에 대해서 이제 고민을 하고 그 변화하는 값을 어느 정도로 수정할 건지",
                "speaker": "Speaker 1",
                "timestamp": "00:11:16"
            },
            {
                "text": "그거를 이제 픽셀로 픽셀을 어느 정도 간격으로 할 건지 이런 식으로 하면 해서 이 부분 자체가 좀 많이 복잡한 내용이라서",
                "speaker": "Speaker 1",
                "timestamp": "00:11:22"
            },
            {
                "text": "이 부분까지 이 부분들은 이제 자세하게 설명은 안 드리고 그냥 이런 게 있다 정도만 아시면 될 것 같아요. 그래서 유체 역학 기반으로 하기도 하고",
                "speaker": "Speaker 1",
                "timestamp": "00:11:30"
            },
            {
                "text": "이제 변형 표현 모델 이제 비스플라이 많이 쓰는 모델이긴 한데 이제 이런 것도 있고 유한 요소로 의해서",
                "speaker": "Speaker 1",
                "timestamp": "00:11:41"
            },
            {
                "text": "방사선 기즈 함수를 통해서 이제 디폼하는 모델들이 이런 게 정도가 있다라고 그러면 여러분들은 아시면 될 것 같아요.",
                "speaker": "Speaker 1",
                "timestamp": "00:11:49"
            },
            {
                "text": "너무 세세하게 각각 뭐 하는지 그런 것까지는 아실 필요는 없고 뒷부분에 이제 간략하게 좀 설명을 더 드리긴 할 거예요. 네 다음 주에 내일.",
                "speaker": "Speaker 1",
                "timestamp": "00:11:57"
            },
            {
                "text": "그래서 그 정도만 아시면 될 것 같고 그래서 이제 정합을 이제 실제로 적용을 해보는 거예요.",
                "speaker": "Speaker 1",
                "timestamp": "00:12:07"
            },
            {
                "text": "두 개의 이미지가 있고 지금 보시면 얘가",
                "speaker": "Speaker 1",
                "timestamp": "00:12:16"
            },
            {
                "text": "이제 10도 회전을 적용을 했고 그리고 x 축에 대해서도 17ml y 축에 대해서도 13mm만큼 이동을 시킨 이미지가 이제 생성이 됐어요. 이거에 대해서 이제 정합을 두 개를",
                "speaker": "Speaker 1",
                "timestamp": "00:12:21"
            },
            {
                "text": "적용을 해보겠다라는 식으로 이제 갈 거예요. 그래서 이제 밝기값 기반의 정합이라는 걸 이제 적용을 할 거예요.",
                "speaker": "Speaker 1",
                "timestamp": "00:12:32"
            },
            {
                "text": "갈빛값 기반. 그러면 당연히 머릿속에 딱 들어오는 게 픽셀 값을 비교해 본다라고 보시면 되겠죠 여러분들 이제 픽셀",
                "speaker": "Speaker 1",
                "timestamp": "00:12:40"
            },
            {
                "text": "이번 과제를 해보시면서 픽셀과 접근을 해보시기도 하셨고 그러니까 어떤 개념인지 대충 아실 거라고 생각해요. 그래서 이제",
                "speaker": "Speaker 1",
                "timestamp": "00:12:49"
            },
            {
                "text": "이 영상 두 개를 두 개를 매칭을 해가지고 붙여가지고 이제",
                "speaker": "Speaker 1",
                "timestamp": "00:12:58"
            },
            {
                "text": "그 부분이 겹치는 부분에 대해서 이제 밝기값을 비교를 해가지고 오차를 측정한다고 보시면 될 것 같아요.",
                "speaker": "Speaker 1",
                "timestamp": "00:13:04"
            },
            {
                "text": "전체에 대해서 이제 적용을 하면 너무 각도 복잡해지고 그러니까 이제 겹치는 부분에 대해서만 적용을 한다고 보시면 될 것 같아요.",
                "speaker": "Speaker 1",
                "timestamp": "00:13:11"
            },
            {
                "text": "그래서 이제 여기서는 지금 밝기값 기반이긴 한데 이제 픽셀 반 오차를 어떻게 어떤 값으로 측정을 할 건지 어떤 방식으로 측정을 할 건지 발빛 값으로 할 건지 특징적으로 할 건지",
                "speaker": "Speaker 1",
                "timestamp": "00:13:23"
            },
            {
                "text": "그리고 변화 모델들은 어떤 거 어떤 방향으로 통해서 변화 모델을 찾을 건지",
                "speaker": "Speaker 1",
                "timestamp": "00:13:35"
            },
            {
                "text": "그리고 그 찾는 방법들을 어떤 기법을 적용할 건지 이런 부분을 여러분들이 이제 세부적으로 이제 추가적으로 선택할 수 있는 사항이라고 보시면 될 것 같아요.",
                "speaker": "Speaker 1",
                "timestamp": "00:13:40"
            },
            {
                "text": "그래서 중첩된 영역에서 이제 픽셀 위치 값들 여기서는 이제 밝기값을 제곱의 합으로 구한다라고 보시면 될 것 같아요.",
                "speaker": "Speaker 1",
                "timestamp": "00:13:50"
            },
            {
                "text": "각 매칭되는 픽셀 값에 매핑되는 픽셀 값에 대해서 빼고 그다음에 제곱을 하는 식으로 해가지고 픽셀 값에",
                "speaker": "Speaker 1",
                "timestamp": "00:14:00"
            },
            {
                "text": "차이를 구한다고 보시면 될 것 같아요. 여기는 제곱 차의 합을 이용했다. 이제 제곱 차이 합을 통해서 구하면은 계산하기가 되게 쉬워요.",
                "speaker": "Speaker 1",
                "timestamp": "00:14:09"
            },
            {
                "text": "그러고 이분을 통해서 저희가 구했었죠 그래디언트를 구해가지고 어느 쪽으로 변화가 되는지 그런 식으로 구할 수 있었죠.",
                "speaker": "Speaker 1",
                "timestamp": "00:14:20"
            },
            {
                "text": "변화 값에서 2분에 가능하다는 시점이 있는데 이게 밝기값을 이용해 가지고",
                "speaker": "Speaker 1",
                "timestamp": "00:14:28"
            },
            {
                "text": "비교를 할 때 단점이 이제 영상이 촬영되는 장비 그러니까 단순하게 그냥 카메라로 봐도 카메라로 어떤 카메라 아이폰으로 찍었냐 삼성폰으로 찍었냐 그거에 따라서도 차이가 있긴 있죠",
                "speaker": "Speaker 1",
                "timestamp": "00:14:34"
            },
            {
                "text": "어느 정도 어떤 파라미터 값으로 카메라를 찍었는지 차이가 있으니까 그것도 있고 똑같은 물체를 찍을 때도 이제 어디 시간에 따라서 조명도 차이가 날 수도 있는 거니까",
                "speaker": "Speaker 1",
                "timestamp": "00:14:48"
            },
            {
                "text": "그래서 이것들을 이제 보정하기가 좀 어렵다라고 보시면 될 것 같고 저희는 이제 의료 영상을 좀 자주 다르니까 이 수업에서",
                "speaker": "Speaker 1",
                "timestamp": "00:15:00"
            },
            {
                "text": "의래 영상에서는 이제 조영제 그러니까 이제 특정 부위를 밝게 하기 위해서 집어넣는",
                "speaker": "Speaker 1",
                "timestamp": "00:15:09"
            },
            {
                "text": "액체 같은 조영제 등에 의해서 오차가 생길 수도 있고 여러분들이 케이스 4번을 다뤄보셨을지도 모르겠는데 그게 아티팩트가 하나 있죠 크게",
                "speaker": "Speaker 1",
                "timestamp": "00:15:15"
            },
            {
                "text": "그래서 주변에 밝기값 영향을 미치죠 그런 경우에 위해서도 이제 어려움이 생길 수도 있다고 보시면 될 것 같아요. 주변에 밝기값이 확 달라지니까",
                "speaker": "Speaker 1",
                "timestamp": "00:15:25"
            },
            {
                "text": "그래서 그런 식으로 이제 발빛값만 가지고 단순하게 이제 정합을 하면 이런 식으로 어려움이 있다라고 보시면 될 것 같아요.",
                "speaker": "Speaker 1",
                "timestamp": "00:15:35"
            },
            {
                "text": "그래서 이제 제곱 발비값 제곱 차를 통해서 아까 전에 그 영상하고 각도 돌리고 이동시킨 거 하고",
                "speaker": "Speaker 1",
                "timestamp": "00:15:42"
            },
            {
                "text": "기존에 원래 있는 이미지하고 밝기값 제곱 차를 구하면 이런 식으로 나오는데 이거를 이제 계속 조금씩",
                "speaker": "Speaker 1",
                "timestamp": "00:15:50"
            },
            {
                "text": "이제 조금씩 조금씩 이제 이동을 시키면서 차를 구하는 거예요. 근데 이게 이제",
                "speaker": "Speaker 1",
                "timestamp": "00:15:57"
            },
            {
                "text": "만약에 영상 두 개가 똑같이 완벽하게 대칭이 매핑이 되면은 각각 제대로 된 값에 매핑이 되면 이제 각각 빼면",
                "speaker": "Speaker 1",
                "timestamp": "00:16:03"
            },
            {
                "text": "차가 0이 되겠죠 똑같은 픽셀 값이니까 그래서 그런 식으로 했을 때 오차 값이 당연히 0이 돼야 돼요. 근데",
                "speaker": "Speaker 1",
                "timestamp": "00:16:12"
            },
            {
                "text": "저희가 실제로 다 데이터를 다룰 때 0 0이 나오기는 힘들고 이제 최소한 이제 제일 변화량이 작은",
                "speaker": "Speaker 1",
                "timestamp": "00:16:22"
            },
            {
                "text": "값을 찾는다라고 보시면 될 것 같아요. 0에 최대한 수렴할 수 있게 그런 식으로 해가지고 이제 찾아나간다라고 보시면 될 것 같아요.",
                "speaker": "Speaker 1",
                "timestamp": "00:16:31"
            },
            {
                "text": "그래서 이제 밝기값 측정을 통해서 이 이제 물체를 조금씩 움직이면서 오차를 측정하고",
                "speaker": "Speaker 1",
                "timestamp": "00:16:43"
            },
            {
                "text": "그래서 픽셀에서 역 변환을 통해서 이제 뭐 이런 식으로 그래서 측정한다 밝기값을 통해서 이제 측정한다고 보시면 될 것 같아요. 그래서",
                "speaker": "Speaker 1",
                "timestamp": "00:16:52"
            },
            {
                "text": "아까 전에 보관을 말씀드렸었죠 이게 여기에 해당되는 픽셀 값이 지금 보시면 여기 내부에",
                "speaker": "Speaker 1",
                "timestamp": "00:17:01"
            },
            {
                "text": "이제 종수 값에 해당하지 않고 여기 중간에 이렇게",
                "speaker": "Speaker 1",
                "timestamp": "00:17:11"
            },
            {
                "text": "존재할 수 있게 되거든요 매칭되는 값이 매핑되는 값이. 그러니까 이런 경우에 이제 보관이라는 기법을 통해서",
                "speaker": "Speaker 1",
                "timestamp": "00:17:14"
            },
            {
                "text": "이제 여러분들이 이 값을 이제 추론을 해서 그 값을 뽑아내야 되는 거예요. 그래서 이 부분에 대해서 이제",
                "speaker": "Speaker 1",
                "timestamp": "00:17:21"
            },
            {
                "text": "이제 보관하는 기법이 이제 추가적으로 나오는 거예요. 그래서 이제 보관을 이런 식으로 해서 이제 보관이 필요하다라는 거고",
                "speaker": "Speaker 1",
                "timestamp": "00:17:30"
            },
            {
                "text": "그래서 이제 비류식을 통해서 구하면 되긴 해요. 이 부분을 이제 증명을 따로",
                "speaker": "Speaker 1",
                "timestamp": "00:17:40"
            },
            {
                "text": "혹시 비명 필요하신 분은 와가지고 물어보시면 되고 저한테 물어보시면 되고 이런 식으로 해가지고 기 레이 카트",
                "speaker": "Speaker 1",
                "timestamp": "00:17:49"
            },
            {
                "text": "이제 비례식을 통해서 이 값이 어디에 어디에 해당되는지 이거 두 개를 통해서 이거에 x 값을 더하고",
                "speaker": "Speaker 1",
                "timestamp": "00:17:58"
            },
            {
                "text": "이 x 값에서 이 y 값에 해당하는 영역의 b를 통해서 이제",
                "speaker": "Speaker 1",
                "timestamp": "00:18:07"
            },
            {
                "text": "좌표 값을 구한다고 보시면 될 것 같아요. 그래서 그거를 이제 식으로 나타내면 이런 식으로 이제 좀 복잡한 식이 될 수 있는데",
                "speaker": "Speaker 1",
                "timestamp": "00:18:12"
            },
            {
                "text": "이런 식으로 나타난다라고 보시면 될 것 같아요. 그래서 이 비제시를 통해서 구하는 거는 여러분들 그냥",
                "speaker": "Speaker 1",
                "timestamp": "00:18:22"
            },
            {
                "text": "어떻게 어떤 비율로 통계에서 구하는지 정도는 이제 좀 머릿속에 넣어놓으시면 될 것 같아요. 보관하는 방법은",
                "speaker": "Speaker 1",
                "timestamp": "00:18:27"
            },
            {
                "text": "혹시 이거 증명하는 과정이 필요하신 분은 와가지고 물어보시면 알려드리긴 할게요. 그래서 이제 보관도 이제",
                "speaker": "Speaker 1",
                "timestamp": "00:18:40"
            },
            {
                "text": "보간도 적용을 하면서 이제 각각의 픽셀 값을 이제 계속 비교를 하면서 차 제목을 비교를 하면서",
                "speaker": "Speaker 1",
                "timestamp": "00:18:49"
            },
            {
                "text": "영상 자체를 계속 이동을 반복을 해요. 그래서",
                "speaker": "Speaker 1",
                "timestamp": "00:18:57"
            },
            {
                "text": "이제 100회 반복을 하면서 이동을 계속 적용을 하면서 이제 최소 값이 되는 0이 되는 값을 이제 찾아나가는 거죠 영상 2개가.",
                "speaker": "Speaker 1",
                "timestamp": "00:19:01"
            },
            {
                "text": "그래서 이제 계속 반복을 하면 할수록 이제 조금씩 유사해지고 결국에 498일까지 반복을 했을 때 영상 차를 구했을 때 이제 거의",
                "speaker": "Speaker 1",
                "timestamp": "00:19:09"
            },
            {
                "text": "0에 가까워지는 거의 어두워졌죠",
                "speaker": "Speaker 1",
                "timestamp": "00:19:19"
            },
            {
                "text": "이런 식으로 이제 조금씩 매핑을 해 나가면서 반복을 한다고 보시면 될 것 같아요. 그래서 이거를 498회까지 반복할 동안 여러분들이 이 498회를 몇 번까지 줄일 수 있는지",
                "speaker": "Speaker 1",
                "timestamp": "00:19:21"
            },
            {
                "text": "그거를 이제 최적화하는 것도 여러분들의 능력이 되겠죠 그리고 이거를 생각하는 이 알고리즘이 돼요.",
                "speaker": "Speaker 1",
                "timestamp": "00:19:32"
            },
            {
                "text": "찾아야 되는 사람의 능력이 되겠죠 498회를 반복할 건지 아니면 그 반복할 때 이동하는 값이나 회전하는 값을 어떤 식으로 주면서 조금씩 이 값을 줄여가지고 최적화를 할 건지",
                "speaker": "Speaker 1",
                "timestamp": "00:19:39"
            },
            {
                "text": "그래서 이번에 아까 전에 앞에는 이제 밝기값을 통해서 찾았다고 하면 이번에 이제 특징점을 통해서 본다고 보면 될 것 같아요. 저희 이제",
                "speaker": "Speaker 1",
                "timestamp": "00:19:53"
            },
            {
                "text": "앞에서 계속 막 달았었죠 스님이나 스켈레토나이제이션 그래가지고 영상 자체를 얇게 한 줄로 이제 분할을 한 다음에 혈관을 얇게",
                "speaker": "Speaker 1",
                "timestamp": "00:20:03"
            },
            {
                "text": "이제 나타낸 다음에 그거에 대해서 이제 교차점과 이제 각도 이런 특정 값들을 이제 뽑아내게 되는 거예요. 그리고 아니면 이 두께가 어느 정도 되는지 이런 식으로",
                "speaker": "Speaker 1",
                "timestamp": "00:20:13"
            },
            {
                "text": "특징점을 이제 뽑아가지고 저장하게 되는 거예요. 아까 전에 단순하게 8기 값만 비교했다면 이거는 특징점 비교를 통해서 비교한다고 보시면 될 것 같아요.",
                "speaker": "Speaker 1",
                "timestamp": "00:20:26"
            },
            {
                "text": "그래서 이제 이 혈관 자체를 이제 투비 형태로 분할을 해가지고 이거를 투비 형태로 분할을 해가지고",
                "speaker": "Speaker 1",
                "timestamp": "00:20:36"
            },
            {
                "text": "이제 이 튜브의 두께가 두께가 어느 정도 되는지 비교를 한다든지",
                "speaker": "Speaker 1",
                "timestamp": "00:20:44"
            },
            {
                "text": "이제 그런 식으로 하면서 이제 특징 형태 이런 것까지 고려를 하면서 분할을 하게 되는 거죠.",
                "speaker": "Speaker 1",
                "timestamp": "00:20:49"
            },
            {
                "text": "아무래도 이것도 이제 영상의 스케일이나 뭐 이런 거 여러 가지 영향을 받을 수 있어서 구현할 때 여러 가지 단점이 존재하긴 하는데",
                "speaker": "Speaker 1",
                "timestamp": "00:20:56"
            },
            {
                "text": "아무래도 단순히 밝기만 비교하는 거와는 또 이제 다른 장단점이 있기 때문에 이 방법을 통해서도",
                "speaker": "Speaker 1",
                "timestamp": "00:21:06"
            },
            {
                "text": "정합을 할 수 있다 정도만 아시면 될 것 같아요. 각각의 장단점이 있으니까 정합 방법은 그래서 여러분들이",
                "speaker": "Speaker 1",
                "timestamp": "00:21:14"
            },
            {
                "text": "그 각각의 데이터에 대해서 어떤 방법이 최적화된 방법인지 어떤 방법으로 했을",
                "speaker": "Speaker 1",
                "timestamp": "00:21:21"
            },
            {
                "text": "가장 쉽게 잘 찾았는지 그거를 여러분들이 좀 적용을 해 보면서 가장 최적의 알고리즘을 찾는 것도 방법 중에 하나예요.",
                "speaker": "Speaker 1",
                "timestamp": "00:21:27"
            },
            {
                "text": "그래서 각 특징점들 비교해가지고 가장 유사한 점들이 어디가 되는지 찾아나가면서",
                "speaker": "Speaker 1",
                "timestamp": "00:21:41"
            },
            {
                "text": "그거에 대해서 이제 특징점 오차를 이제",
                "speaker": "Speaker 1",
                "timestamp": "00:21:49"
            },
            {
                "text": "여기서 이제 유클리디안님 거리 맞구나 유클리디안 거리로 이제 측정을 해가지고 옷이 측정을 했어요.",
                "speaker": "Speaker 1",
                "timestamp": "00:21:53"
            },
            {
                "text": "그래가지고 이제 회전과 특징점들 집합에 대해서 이제 회전 이동을 구해가지고 그거에 대해서 오차 측정을 하면서",
                "speaker": "Speaker 1",
                "timestamp": "00:22:01"
            },
            {
                "text": "아까처럼 반복을 계속 이동과 회전을 계속 적용을 하면서 반복해 나가서 그거를 찾는다고 보시면 될 것 같아요. 그거에 대한 이제 식 유도하는 건데",
                "speaker": "Speaker 1",
                "timestamp": "00:22:09"
            },
            {
                "text": "이런 게 있다라고 그러면 여러분들은 생각하시고 넘어가시면 되는 거예요. 외우실 필요 없는 거예요. 그래서 이 변한 인자들이",
                "speaker": "Speaker 1",
                "timestamp": "00:22:19"
            },
            {
                "text": "최적이 되는 값을 찾아내가지고 그거를 한다라고까지만 이해하시면 되고 이 식들은 다 여러분들이 외우실 필요가 없어요. 그래서",
                "speaker": "Speaker 1",
                "timestamp": "00:22:27"
            },
            {
                "text": "이거를 이제 체적인 자를 조금씩 찾기 위해서 무한 반복을 하면서 계속 찾을 수도 있는데 이거를 이제 좀 영리하게",
                "speaker": "Speaker 1",
                "timestamp": "00:22:37"
            },
            {
                "text": "해보겠다라고 하시면은 이제 이 변환 함수 아까 전에 그 이 변환 함수를 이제 변환 인자들에 대해서 이제 미분을 적용을 해가지고",
                "speaker": "Speaker 1",
                "timestamp": "00:22:46"
            },
            {
                "text": "그거에 대해서 이제 기울기가 0이 될 때 펜을 구하면 그게 최적일 때가 이제 많이",
                "speaker": "Speaker 1",
                "timestamp": "00:22:56"
            },
            {
                "text": "최적일 확률이 많이 높다라고 해가지고 무조건 그게 최적이라는 건 아니고 최적일 해가 최대한 높다라고 생각하시면 될 것 같아요. 그래서",
                "speaker": "Speaker 1",
                "timestamp": "00:23:04"
            },
            {
                "text": "기울기 0일 때 이 값이 이 미분한 값이 0일 때를 해를 구하는 식으로 해가지고 접근을 할 수도 있다",
                "speaker": "Speaker 1",
                "timestamp": "00:23:13"
            },
            {
                "text": "라고 보시면 될 것 같아요. 그래서",
                "speaker": "Speaker 1",
                "timestamp": "00:23:22"
            },
            {
                "text": "이제 기울기 값을 통해서 이제 계속 구한다고 보시면 될 것 같고 이 앞에까지 오차 함수를 계산할 때 이제 icp 알고리즘이라는 건데",
                "speaker": "Speaker 1",
                "timestamp": "00:23:28"
            },
            {
                "text": "인터렉티브 클로색 포인트라는 거 해가지고 이제 점들에 대해서 이제 대응 관계 각각 점들에 대해서",
                "speaker": "Speaker 1",
                "timestamp": "00:23:37"
            },
            {
                "text": "대응 관계를 이제 계속 파악을 하고 그거에 대해서 이제 인지하다. 간의 차이를 비교를 하고 그래서 그 이동을 시키고 다시",
                "speaker": "Speaker 1",
                "timestamp": "00:23:46"
            },
            {
                "text": "인자값 비교를 하고 또 그 전 인자 값과 차이를",
                "speaker": "Speaker 1",
                "timestamp": "00:23:57"
            },
            {
                "text": "봤을 때 이게 제대로 이동된 건지 아닌지 반복하면서 이제 계속 반복하면서 찾아 나간다고 보시면 될 것 같아요.",
                "speaker": "Speaker 1",
                "timestamp": "00:24:03"
            },
            {
                "text": "그래서 클로즈 포인트라고 이름이 써져 있듯이 이거는 이제 대응되는 관계를 파악할",
                "speaker": "Speaker 1",
                "timestamp": "00:24:10"
            },
            {
                "text": "인접한 인접한 점과 대응된다라고 이제 각 여기 써져 있네요. 가장 가까운 대응 점과 이제 대응된다라고",
                "speaker": "Speaker 1",
                "timestamp": "00:24:21"
            },
            {
                "text": "이제 파악을 하는 거라고 보시면 될 것 같아요. 그러니까 제일 가까운 점과 차이를 계속 계산한다고 보시면 될 것 같아요. 그런 식으로 해서 비교를 하면서",
                "speaker": "Speaker 1",
                "timestamp": "00:24:29"
            },
            {
                "text": "이거 값이 이제 최적이 될 때까지 반복하는 알고리즘이다라고 보시면 될 것 같아요.",
                "speaker": "Speaker 1",
                "timestamp": "00:24:38"
            },
            {
                "text": "그래서제일 가까운 점을 특징점으로 생각을 하고 그거를 통해서 이제 수렴하는 방법으로",
                "speaker": "Speaker 1",
                "timestamp": "00:24:44"
            },
            {
                "text": "수렴할 때까지 반복하는 알고리즘이다 정도로 간략하게 나타나면 될 것 같아요.",
                "speaker": "Speaker 1",
                "timestamp": "00:24:50"
            },
            {
                "text": "그래서 이제 특징 정리 고정된 연수 장표에서 이제 대응 관계를 이제",
                "speaker": "Speaker 1",
                "timestamp": "00:24:56"
            },
            {
                "text": "제일 가까운 점으로 했을 때 어디가 대응되는지 찾고 그거에 대해서 이제 계속 반복해서 나가서 찾은다라고 보시면 될 것 같아요.",
                "speaker": "Speaker 1",
                "timestamp": "00:25:01"
            },
            {
                "text": "그래서 아까 전에 안구의 혈관 부분도 icp로 만약에 찾았을 때 최적화를 icp로 했다.",
                "speaker": "Speaker 1",
                "timestamp": "00:25:12"
            },
            {
                "text": "그러면은 이런 식으로 비교했을 때 네 어느 정도 좀 윤산하게 대응돼서 고쳐졌다라고 보시면 될 것 같아요.",
                "speaker": "Speaker 1",
                "timestamp": "00:25:21"
            },
            {
                "text": "이게 완벽하게 이제 보시면은 완벽하게 붙지는 않았죠 그래도 이 정도만 붙어도",
                "speaker": "Speaker 1",
                "timestamp": "00:25:36"
            },
            {
                "text": "이게 가장 최적이다라고 이게 가장 최적의 해였다라고 이제 나타난다고 보시면 될 것 같아요.",
                "speaker": "Speaker 1",
                "timestamp": "00:25:43"
            },
            {
                "text": "그래서 아까 전에 이제 영상에 대해서 밝기값으로 하는 거 그리고 이제 특징점을 기반으로 하는 정합 방법이 있었다면 이제",
                "speaker": "Speaker 1",
                "timestamp": "00:25:57"
            },
            {
                "text": "3차원으로 넘어가면은 이제 여러분들이 이제 표면을 통해서 정합하는 기법이 있어요. 이게 이제",
                "speaker": "Speaker 1",
                "timestamp": "00:26:07"
            },
            {
                "text": "그 단순하게 이제 사람 몸통에 대해서 여러분들이 정화를 한다고 하면 몸통 내부에 있는 이제",
                "speaker": "Speaker 1",
                "timestamp": "00:26:16"
            },
            {
                "text": "장기들 같은 걸 가지고서는 종합을 하겠다라고 하면은 이제 장기들 위치가",
                "speaker": "Speaker 1",
                "timestamp": "00:26:24"
            },
            {
                "text": "이제 사람이 계속 어떻게 눕냐에 따라서 형태가 계속 변하잖아요 이게 얘가 이제 고체가 아니고 유전적인 형태를 지니고 있다 보니까 그래서",
                "speaker": "Speaker 1",
                "timestamp": "00:26:30"
            },
            {
                "text": "그런 경우에 이제 단순하게 그냥 표면 표면의 몸통 이제",
                "speaker": "Speaker 1",
                "timestamp": "00:26:39"
            },
            {
                "text": "겉의 이 표면만 가지고선 정합을 하겠다라는 식으로 접근을 해도 되는 방법이라고 생각하시면 될 것 같아요. 그래서 이제 포인트 시그니처 규법",
                "speaker": "Speaker 1",
                "timestamp": "00:26:43"
            },
            {
                "text": "그러고 이제 PCA 기법 크리티컬 컴포넌트 아너지플리시스 PCA 기법 그리고 icp 방금 전에 제일 가까운 거에 대해서 이제",
                "speaker": "Speaker 1",
                "timestamp": "00:26:52"
            },
            {
                "text": "그게 매핑되는 점이다라고 찾는다고 했었던 icp 기법 이런 식으로 해가지고 3개의 기법 정도가 있다고 보시면 될 것 같아요.",
                "speaker": "Speaker 1",
                "timestamp": "00:27:02"
            },
            {
                "text": "그래서 얘네들이 이제 구현을 하려고 하면 다 되게 복잡하고 머리가 아파요. 그러고 최적화하려고",
                "speaker": "Speaker 1",
                "timestamp": "00:27:11"
            },
            {
                "text": "최적화를 해가지고 최대한 빨리 찾게 하는 이런 것 자체가 이제 적용하는 것 자체가 이제 그 알고리즘에",
                "speaker": "Speaker 1",
                "timestamp": "00:27:19"
            },
            {
                "text": "이제 퀄리티를 나타낸다. 보셔서 이거 자체를 좀 구현한다고 하면은",
                "speaker": "Speaker 1",
                "timestamp": "00:27:27"
            },
            {
                "text": "머리가 아프고 복잡할 수가 있어서 그냥 이런 프로세스로 진행된다 정도만 이해하고 이제 인터넷 보시면 구현돼 있는 코드들을 많이 여러분들이 찾을 수도 있어요. 그래서",
                "speaker": "Speaker 1",
                "timestamp": "00:27:32"
            },
            {
                "text": "그냥 간략하게 이런 세 프로세스로 진행되는구나라고 그 이해하고 넘어가시면 될 것 같아요. 그래서 서피스와 이제 포인트들을 이용해서 인포메이션을 찾고",
                "speaker": "Speaker 1",
                "timestamp": "00:27:44"
            },
            {
                "text": "인포메이션을 기본으로 이제",
                "speaker": "Speaker 1",
                "timestamp": "00:27:54"
            },
            {
                "text": "쌍을 어떻게 이루어 내는지 이제 매핑을 찾는다. 그리고 매핑을 통해서 이제 트랜스포메이션을 적용하고 이제 트랜스포메이션을 계속 적용하면서 이제 최적이 어떤 건지 찾는다 정도로",
                "speaker": "Speaker 1",
                "timestamp": "00:27:57"
            },
            {
                "text": "진행한다고 보시면 될 것 같고 그래서 포인트 시그니처 방법을 이제 좀 간략하게 설명드리면 이제 프로파일 형태로",
                "speaker": "Speaker 1",
                "timestamp": "00:28:09"
            },
            {
                "text": "이제 나타내서 그 각 점에 대해서 프로파일 형태를 이런 식으로 나타내서 이게 어디에 이동해야지 최적인지 그걸",
                "speaker": "Speaker 1",
                "timestamp": "00:28:18"
            },
            {
                "text": "찾는다고 보시면 될 것 같아요. 그래서 여기서 이제 예를 들으면 이제",
                "speaker": "Speaker 1",
                "timestamp": "00:28:27"
            },
            {
                "text": "이 표면 점 중에 피이라는 점 하나로 찍어요. 그다음에 이 피에 대해서 이제 구형 형태로 이미지를 만들고",
                "speaker": "Speaker 1",
                "timestamp": "00:28:36"
            },
            {
                "text": "이 구 형태로 만들었을 때 표면에 이제 이 얼굴 이게 지금 얼굴 서피스인데 얼굴 서피스와 이 부가",
                "speaker": "Speaker 1",
                "timestamp": "00:28:45"
            },
            {
                "text": "이제 맛 따아서 이제 접점이 되는 부분들이 있을 거예요. 컨투어가 외곽선들이 그거를 이제 씨라고",
                "speaker": "Speaker 1",
                "timestamp": "00:28:53"
            },
            {
                "text": "그래서 이제 외곽선을 c라고 표현을 합니다. 그러고 이 씨를 구한 다음에 이 피에서의 이제 노말 벡터",
                "speaker": "Speaker 1",
                "timestamp": "00:29:01"
            },
            {
                "text": "엔온을 구해가지고 이제 평면의 방정식을 평면을 이제 만든다고 보시면 될 것 같아요. 이 노말 베터에 대해서",
                "speaker": "Speaker 1",
                "timestamp": "00:29:11"
            },
            {
                "text": "평면이 되는 그래서 이제 플레인을 만들고 이 플레인을 만들었으면 아까 전에 만들었으면",
                "speaker": "Speaker 1",
                "timestamp": "00:29:20"
            },
            {
                "text": "이 컨트롤 c를 여기다가 이제 프로젝션을 시킨다고 보시면 될 것 같아요. 2차원 형태로 그래서 2차원 형태로 프로젝션을 시키면 이런 식으로 나오겠죠",
                "speaker": "Speaker 1",
                "timestamp": "00:29:28"
            },
            {
                "text": "그래서 영어를 이제 프로젝션 전이 이제 c라고 하면 프로젝션 이제 플레인에 대해서 프로젝션 시키는 건데 이제 c 타임이라고",
                "speaker": "Speaker 1",
                "timestamp": "00:29:38"
            },
            {
                "text": "표현을 한다라고 보시면 될 것 같고요. 그래서 이 c 프라임에서 t까지의 거리를 이제 계속",
                "speaker": "Speaker 1",
                "timestamp": "00:29:47"
            },
            {
                "text": "측정한다라고 보시면 될 것 같아요. 근데 이 측정하고 측정한다고 보시면 되는데 여기서 이제 p1에서",
                "speaker": "Speaker 1",
                "timestamp": "00:29:55"
            },
            {
                "text": "p 점에서 이제 c 프라임 점들에 대해서 이제 또 벡터를 다 무한히 계속 구한다고 보시면 될 것 같아요. 백터도 계속 구하고 그 거리값도 구한다 정도 보시면 될 것 같아요.",
                "speaker": "Speaker 1",
                "timestamp": "00:30:03"
            },
            {
                "text": "그래서 그래서 여기 써줄 거야. 그래서",
                "speaker": "Speaker 1",
                "timestamp": "00:30:15"
            },
            {
                "text": "이렇게 구했을 때 이 백터값도 구하고 이 거리 값도 구했을 때 이제 제일 이제 거리 값이 크게 나오는",
                "speaker": "Speaker 1",
                "timestamp": "00:30:21"
            },
            {
                "text": "그 점을 하나를 택해가지고 이제 n 2의 백터 값으로 이제 지정을 한다고 보시면 될 것 같아요.",
                "speaker": "Speaker 1",
                "timestamp": "00:30:30"
            },
            {
                "text": "그래서 이제 포인트 시점 아까 전에 그 원래 원래 얼굴에 있었던 서피스에 있던 포인트 시점에 대해서",
                "speaker": "Speaker 1",
                "timestamp": "00:30:39"
            },
            {
                "text": "그제 c 프라임에 대해서 이제 거리값 구하고 세터 값 구하고 여기 시 프라임에 대해서 또 거리 값 구하고 세터 값 구하고 거리 값 구하고 세터 값 구하고 이런 식으로 해가지고 이제",
                "speaker": "Speaker 1",
                "timestamp": "00:30:48"
            },
            {
                "text": "이거를 계속 이 값들을 전부 다 만들어가지고 최종적으로 이거를 이제 프로파일로 해가지고 이제 도식화에서 나타나는",
                "speaker": "Speaker 1",
                "timestamp": "00:31:01"
            },
            {
                "text": "이런 식으로 이제 프로파일화 해가지고 이제 도식화에서는 이제 프로젝션 됐을 때 이제 거리 값 앵글",
                "speaker": "Speaker 1",
                "timestamp": "00:31:11"
            },
            {
                "text": "세터 해가지고 이런 식으로 이렇게 이렇게 도식화 해서 이제 이렇게 프로파일화 돼서 나타냈다라고 보시면 될 것 같아요.",
                "speaker": "Speaker 1",
                "timestamp": "00:31:21"
            },
            {
                "text": "그래서 그래서 이제 원래 이제 움직여야 되는 점프가",
                "speaker": "Speaker 1",
                "timestamp": "00:31:31"
            },
            {
                "text": "고정돼 있는 점에 대해서 이제 두 개를 비교해가지고 프로파일을 비교해가지고 대칭 점은 어디",
                "speaker": "Speaker 1",
                "timestamp": "00:31:41"
            },
            {
                "text": "유사 프로파일이 유사한 데가 어디인지 찾는 거예요. 그래가지고 이제 그거 유사한 데를 이제 점 세 개를 이제 찾게 되면은",
                "speaker": "Speaker 1",
                "timestamp": "00:31:48"
            },
            {
                "text": "그 찾은 점으로 인해서 이제 여러분들이 이제 트랜스레이션과 로테이션 값을 이제 구할 수 있다라고 보시면 될 것 같아요.",
                "speaker": "Speaker 1",
                "timestamp": "00:31:58"
            },
            {
                "text": "전 3개를 찾은 이후에 그래서 그거에 대해서 이제 이동 백터를 계산을 해서",
                "speaker": "Speaker 1",
                "timestamp": "00:32:07"
            },
            {
                "text": "이제 최종적으로 로테이션과 트랜슬레이션 값을 구해가지고 이제 적용을 한다라고 보시면 될 것 같아요. 그래서",
                "speaker": "Speaker 1",
                "timestamp": "00:32:14"
            },
            {
                "text": "이걸 간략하게 그 점에 대해서 프로파일을 구하고 그 프로파일들을 구한 거를 가지고서는 어느 점에 대해서 매핑이 되는지 찾고",
                "speaker": "Speaker 1",
                "timestamp": "00:32:24"
            },
            {
                "text": "찾은 거에 대해서 이제 점 세 개를 유사한 점 3개를 유출한 다음에 그 점에 대해서",
                "speaker": "Speaker 1",
                "timestamp": "00:32:33"
            },
            {
                "text": "트랜슬레이션과 로테이션 값을 구한다 정도로 이해하면 될 것 같아요. 이 과정이 너무 복잡하다면 그 정도로 이해하면 넘어갈 것 같아요.",
                "speaker": "Speaker 1",
                "timestamp": "00:32:41"
            },
            {
                "text": "그러고 이제 PCA라는 건데 이거는 이제 확률적인 통계적으로 이제 접근을 하는 거예요.",
                "speaker": "Speaker 1",
                "timestamp": "00:32:51"
            },
            {
                "text": "그래서 이제 소페이스의 이 점들 분포를 이제 코베리언트 매트릭스로 이제 각각 계산을 해가지고 이제 이미지",
                "speaker": "Speaker 1",
                "timestamp": "00:32:58"
            },
            {
                "text": "코베리언트 매트릭스를 개선해서 이제 매트릭스를 만들고 그리고 이거를 통해서 얘가 이제",
                "speaker": "Speaker 1",
                "timestamp": "00:33:07"
            },
            {
                "text": "수행을 하면은 서피스에서 이제 이제 뒤에 이미지를 보여주면서 하는 게 낫겠네. 이런 식으로",
                "speaker": "Speaker 1",
                "timestamp": "00:33:14"
            },
            {
                "text": "이제 장축과 단축에 대해서 이미지를 구할 수가 있어요. 등산 정도를 통해서",
                "speaker": "Speaker 1",
                "timestamp": "00:33:22"
            },
            {
                "text": "그래서 이 장축과 장축을 통해서 이제 이 이미지를 최적이 되는 장축과 단축을 구한 다음에 이 장축과 단축을 이제",
                "speaker": "Speaker 1",
                "timestamp": "00:33:29"
            },
            {
                "text": "이게 90 이게 만약에 3천 원이면 제트값까지 있겠죠 이게 지금 2천 원이라고 나타나면",
                "speaker": "Speaker 1",
                "timestamp": "00:33:38"
            },
            {
                "text": "이런 식으로 2차원을 나타내면 이거 자체를 이제 원점으로 이동을 했을 때 어느 정도 회전되고 이동되는지 그거에 대해서 값을 구한 다음에",
                "speaker": "Speaker 1",
                "timestamp": "00:33:44"
            },
            {
                "text": "그거를 통해서 트랜슬레이션 값, 로테이션 값을 구한다 정도로만 그냥 간단하게 생각하시면 될 것 같아요 전체적인 과정은. 그래서",
                "speaker": "Speaker 1",
                "timestamp": "00:33:51"
            },
            {
                "text": "그런 식으로 PCA는 간단하게 넘어가면 될 것 같고 그러고 icp는 아까 전에 설명드렸었죠 가장",
                "speaker": "Speaker 1",
                "timestamp": "00:34:01"
            },
            {
                "text": "근접한 점들을 유사점이라고 적용을 한 다음에 그거에 대해서 차이 값을 구해가지고",
                "speaker": "Speaker 1",
                "timestamp": "00:34:10"
            },
            {
                "text": "이제 적용 이제 그 차이 값이 최소가 되는 점들을 찾아가면서 반복한다라고 보시면 될 것 같아요. 그래서",
                "speaker": "Speaker 1",
                "timestamp": "00:34:16"
            },
            {
                "text": "보시면 이제 제일 가까운 점들을 매핑해서 그거에 대해서 차를 구하는 식으로 적용을 해서 이제 수렴하는 값을 구할 수 있다",
                "speaker": "Speaker 1",
                "timestamp": "00:34:25"
            },
            {
                "text": "라고 보시면 될 것 같아요. 그래서 이거는 네 방법들은 이 정도로만 이해하고 넘어가시면 될 것 같아요. 혹시 질문 있으신",
                "speaker": "Speaker 1",
                "timestamp": "00:34:35"
            },
            {
                "text": "개념이 좀 많이 어렵죠 제가 생각하면서도 이거를 이해하게 시키 이게 이해하게 시키겠죠",
                "speaker": "Speaker 1",
                "timestamp": "00:34:47"
            },
            {
                "text": "어려울 수도 있겠다라고 생각을 하면서도 지금 설명을 하고 있긴 한데 그냥 여러분들은",
                "speaker": "Speaker 1",
                "timestamp": "00:34:56"
            },
            {
                "text": "그냥 이런 식으로 이런 종류가 있다 정도만 이해하시고 넘어가면 될 것 같아요. 이런 종류가 있다",
                "speaker": "Speaker 1",
                "timestamp": "00:35:06"
            },
            {
                "text": "여러분들이 다 이해하실 필요 없고 그냥 이런 종류가 있다 정도만 이해를 하시고 가시면 될 것 같아요.",
                "speaker": "Speaker 1",
                "timestamp": "00:35:13"
            },
            {
                "text": "그래서 아까 전에 간략하게 말씀드렸던 것처럼 포인트 시그니처는 점에 대해서 프로파일을 구한 다음에 그 프로파일을 비교를 하면서 유사한 점 3개를 찾은 다음에 그거에 대해서 로테이션과 트랜슬레이션을 구해가지고",
                "speaker": "Speaker 1",
                "timestamp": "00:35:21"
            },
            {
                "text": "영상 자체를 정합도로 한다 정도만 이해하시면 될 것 같고",
                "speaker": "Speaker 1",
                "timestamp": "00:35:36"
            },
            {
                "text": "PCA는 이제 이거에 대해서 이제 코베리언트 매트릭스를 구하고 그거에 대해서 이제",
                "speaker": "Speaker 1",
                "timestamp": "00:35:44"
            },
            {
                "text": "이제 분산 값을 적용을 해가지고 데이터를 이제 이제 이제",
                "speaker": "Speaker 1",
                "timestamp": "00:35:51"
            },
            {
                "text": "표로 나타낸 다음에 이거에 대해서 이제 최적이 되는 장축과 단축을 구한 다음에 그거에 대해서 노테이션과 트랜슬레이션",
                "speaker": "Speaker 1",
                "timestamp": "00:35:56"
            },
            {
                "text": "이거를 구한다. 정도로만 그냥 이해하시면 될 것 같고 그러고 icp는",
                "speaker": "Speaker 1",
                "timestamp": "00:36:05"
            },
            {
                "text": "이 가장 가까운 점에 대해서 가장 가까운 점에 대해서 매핑을 해서",
                "speaker": "Speaker 1",
                "timestamp": "00:36:15"
            },
            {
                "text": "그거에 대해서 이제 매핑 한 다음에 이거를 차이를 구해서",
                "speaker": "Speaker 1",
                "timestamp": "00:36:23"
            },
            {
                "text": "매핑을 한 다음에 그것 값들의 차이를 구하고 그다음에 이제 반복한다. 그러고 가까운 점에 대해서 그 정도만 이해해서 이제 이거를 이제",
                "speaker": "Speaker 1",
                "timestamp": "00:36:32"
            },
            {
                "text": "조금 이동을 시키고 다시 최적에 가까운 값들을 비교를 해가지고 그게 값이 작아지는지 커지는지 비교를 하면서",
                "speaker": "Speaker 1",
                "timestamp": "00:36:42"
            },
            {
                "text": "작아지는 방향으로 수령되게 조금씩 반복하면서 이제 가까운 것과 비교한다. 정도로만 이해하시면 될 것 같아요.",
                "speaker": "Speaker 1",
                "timestamp": "00:36:50"
            },
            {
                "text": "여러분들이 이 전체적인 프로세스를 다 이해하지 않으셔도 돼요. 그러니까 전체적으로 그냥 방금 간략하게 말씀드린 정도만 이해하셔도",
                "speaker": "Speaker 1",
                "timestamp": "00:36:57"
            },
            {
                "text": "될 것 같아요. 이번 수업에서 혹시 질문 있으신 분들은 오시면 좀 더 자세하게 설명 드릴게요.",
                "speaker": "Speaker 1",
                "timestamp": "00:37:08"
            },
            {
                "text": "이게 이게 석사분들도 각각에 대해서 논문을 한 편씩 정해서 낼 정도로 주제 자체가",
                "speaker": "Speaker 1",
                "timestamp": "00:37:19"
            },
            {
                "text": "난이도가 높은 주제들이에요. 그러니까 이해하는 게 어려우신 게 정상이 맞는 거예요. 그래서",
                "speaker": "Speaker 1",
                "timestamp": "00:37:28"
            },
            {
                "text": "방금 말씀드린 정도로만 이해하시면 된다라고 이해하시면 될 것 같아요. 혹시 더 알고 싶으신 분은 와서 물어보시면 추가적으로 설명을 드릴 거고",
                "speaker": "Speaker 1",
                "timestamp": "00:37:36"
            },
            {
                "text": "이제 이번에는 이제 가속화하기 위해서 기술들을 보신다고 보시면 될 것 같아요. 두 개를 비교했을",
                "speaker": "Speaker 1",
                "timestamp": "00:37:46"
            },
            {
                "text": "유사도 촉도를 뭘로 비교할 건지 그러고 이거에 대해서 이제 비교하는 과정을 어떤 식으로 할 건지 그러고 이거를 했을 때 이제",
                "speaker": "Speaker 1",
                "timestamp": "00:37:55"
            },
            {
                "text": "영상을 어떤 식으로 샘플링을 해서 비교를 할 건지 샘플링을 했을 때 개수가 많으면 많을수록 비교하는 값이 많아지겠죠 계산량이 많아지고",
                "speaker": "Speaker 1",
                "timestamp": "00:38:05"
            },
            {
                "text": "그래서 그 정도로 보시면 될 것 같아요. 그래서 이제 영상을 비교할",
                "speaker": "Speaker 1",
                "timestamp": "00:38:14"
            },
            {
                "text": "이제 단일 모달리티 영상 정합과 다중 모달리티 영상 정합이 있어요. 이제 단일 모델리티 같은 경우에는 여러분들이 그냥",
                "speaker": "Speaker 1",
                "timestamp": "00:38:23"
            },
            {
                "text": "의료 영상으로 따진다면 CT와 CT MI랑 mr 그래서 같은 모델리티 촬영을 한 것까지 끼리 비교를 한다라고 보시면 될 것 같아요.",
                "speaker": "Speaker 1",
                "timestamp": "00:38:32"
            },
            {
                "text": "그리고 현미경이면 합미경 그래서 만약에 이게 가중 모델리티 같은 경우에는 이제 여러분들이 MI랑 CT를 비교할 수도 있고",
                "speaker": "Speaker 1",
                "timestamp": "00:38:42"
            },
            {
                "text": "현미경과 CP를 비교할 수도 있고 촬영 방법이 다른 걸 비교하는 영상 정합 기법이라고 보시면 될 것 같아요. 그래서 이제 방향 모달리티에 대해서 영상 정합할",
                "speaker": "Speaker 1",
                "timestamp": "00:38:50"
            },
            {
                "text": "비교하는 유사도 척도가 이제 SSD sad NCCL 이렇게 세 개가 있는데 이거는 아까 전에 여러분들한테 계속 설명드렸었던 것처럼",
                "speaker": "Speaker 1",
                "timestamp": "00:39:00"
            },
            {
                "text": "차를 구한 다음에 제곱을 해서 합계를 구해가지고 비교를 하는 거예요. 제곱을 하는 이유는 이 값이 음소가 나오면",
                "speaker": "Speaker 1",
                "timestamp": "00:39:10"
            },
            {
                "text": "전체 값에 영향을 미치겠죠 뭐 마이너스 3 마이너스 2 나왔는데 두 개 더 했을 때 마이너스 1 뭐 이런 식으로",
                "speaker": "Speaker 1",
                "timestamp": "00:39:20"
            },
            {
                "text": "뭔가 값 자체가 복잡해 좀 원하는 대로 안 나올 수가 있으니까 제공을 해서 전부 양수화해서 하는 거죠. 그래서 그거에 대해서 이제 대표적으로",
                "speaker": "Speaker 1",
                "timestamp": "00:39:28"
            },
            {
                "text": "양수가 또 시키는 게 이제 이거 절대값을 취하는 거예요. 제공을 하거나 절대값을 취해가지고 조용한다고 보시면 될 것 같아요.",
                "speaker": "Speaker 1",
                "timestamp": "00:39:37"
            },
            {
                "text": "근데 제가 알기로는 이게 컴퓨터 연산에서 제곱해서 더 하는 게 이제 그때 값 취하는 것보다 계산 자체가 과정이 계산 값이",
                "speaker": "Speaker 1",
                "timestamp": "00:39:46"
            },
            {
                "text": "적다라고 알고 있거든요. 그래서 이거를 보통 많이 쓰긴 해요 이 방법은. 그러고 이 NC 같은 경우에는 이 영상 두 개에 대해서 픽셀",
                "speaker": "Speaker 1",
                "timestamp": "00:39:57"
            },
            {
                "text": "을 비교를 할 때 그거를 이상화 나타나서 이산화된 식으로 이제 나타나는 거지 비교를 하는 건데 y는 as 플러스 b라는 식으로 통해서 나타나서 비교하는 건데",
                "speaker": "Speaker 1",
                "timestamp": "00:40:07"
            },
            {
                "text": "이론상으로는 그렇고 이제 보시면 그냥 어떤 특정한 식을 통해서",
                "speaker": "Speaker 1",
                "timestamp": "00:40:18"
            },
            {
                "text": "두 개의 값을 비교해서 나타난 차를 구한다라고 보시면 될 것 같아요. 세 가지 방법으로 뒷부분에서 이제 각각 설명을 드릴 거고",
                "speaker": "Speaker 1",
                "timestamp": "00:40:23"
            },
            {
                "text": "다중 모달리티에서는 이제 조인트 엔트로피하고 머추얼 인포메이션 이 두 개를 통해서 다중 모달리티에서는 영상을 정합한다라고 보시면 될 것 같아요.",
                "speaker": "Speaker 1",
                "timestamp": "00:40:33"
            },
            {
                "text": "그래서 이제 영상 a에 대해서 a를 통해서 영상 a 이제 b와 c를 만들었어요.",
                "speaker": "Speaker 1",
                "timestamp": "00:40:44"
            },
            {
                "text": "근데 이제 비교를 했을 때 b가 더 유사성이 높냐 그러니까 이게 더 유사하냐 아니면 c가 더 유사하냐",
                "speaker": "Speaker 1",
                "timestamp": "00:40:53"
            },
            {
                "text": "그거를 비교했을 때 여러분들은 그냥 눈으로 봤을 때 얘가 더 좋아요 라고 질문을 저한테 설명하실 수 있을 만한 분이 계실까요?",
                "speaker": "Speaker 1",
                "timestamp": "00:41:03"
            },
            {
                "text": "힘들게 눈으로만 보면은 도대체 이게 뭐가 맞는 건지 뭐 뭐가",
                "speaker": "Speaker 1",
                "timestamp": "00:41:12"
            },
            {
                "text": "정확히 자기가 잘 됐다라고 표현할 수 있을 만한 그런 기준이 없죠 그래서 이거를 아까 전에 말씀드렸었던",
                "speaker": "Speaker 1",
                "timestamp": "00:41:18"
            },
            {
                "text": "그 기법들을 통해서 이제 비교를 한다라고 보시면 될 것 같아요. 그래서 이제 이제 제일 첫 번째 아까 전에 평균 제곱 차이",
                "speaker": "Speaker 1",
                "timestamp": "00:41:26"
            },
            {
                "text": "여러 번 설명드렸었죠 각각의 픽셀에 대해서 차를 구하고 제곱을 한 다음에 총합을 구하고",
                "speaker": "Speaker 1",
                "timestamp": "00:41:35"
            },
            {
                "text": "마지막으로 전체 픽셀 개수만큼 나눠주는 식으로 해가지고 유사성을 비교한다라고 보시면 될 것 같아요.",
                "speaker": "Speaker 1",
                "timestamp": "00:41:43"
            },
            {
                "text": "그래서 이것도 아까 말씀드렸듯이 최대한 0에 수렴될 수 있게 두 개 영상이 완전 똑같기는 힘드니까",
                "speaker": "Speaker 1",
                "timestamp": "00:41:49"
            },
            {
                "text": "0이 나오기 힘드니까 0에 수렴될 수 있게 이제 추적해 나가다라고 보시면 될 것 같아요.",
                "speaker": "Speaker 1",
                "timestamp": "00:41:56"
            },
            {
                "text": "그래서 여러 번 이제 움직이는 영상 고정 되있는 영상이 있는데 이거를 이제 이동을 시켰어요.",
                "speaker": "Speaker 1",
                "timestamp": "00:42:06"
            },
            {
                "text": "이동을 시켜서 이제 비교를 하는 거예요. 그래서 이게 이게 이제",
                "speaker": "Speaker 1",
                "timestamp": "00:42:17"
            },
            {
                "text": "이게 이제 x 값이고 이게 y 값이에요. 그리고 이게 유사도 비교를 했을 때 0에 수렴될 수 있게 아까 한다고 0에 수령된 수 있게 한다고 했었죠",
                "speaker": "Speaker 1",
                "timestamp": "00:42:26"
            },
            {
                "text": "영상 두 개가 만약에 이동이나 스케일 로테이션 이런 게 하나도 안 들어갔다고 치면",
                "speaker": "Speaker 1",
                "timestamp": "00:42:39"
            },
            {
                "text": "이 0 콤마 0에서 당연히 이동되지 않은 영상 두 개를 비교하면 0 콤마 0랑 아무것도 이동도 안 된 상태였을 때 가장 수렴을 하겠죠",
                "speaker": "Speaker 1",
                "timestamp": "00:42:45"
            },
            {
                "text": "그런 식으로 해가지고 이제 이거를 이제 그래프로 나타내면 이런 식으로",
                "speaker": "Speaker 1",
                "timestamp": "00:42:54"
            },
            {
                "text": "나타나서 멀어질수록 이런 식으로 나타난다라고 보시면 될 것 같아요. 근데 이거를",
                "speaker": "Speaker 1",
                "timestamp": "00:43:00"
            },
            {
                "text": "이제 영꽃마 0에서 하는 건데 이게 만약에 XY 값에 대해서 마이너스 15 마이너스 25만큼 이동을 각자 시켜봐요. 그다음에",
                "speaker": "Speaker 1",
                "timestamp": "00:43:10"
            },
            {
                "text": "이거에 대해서 유사도 측정을 아까처럼 식으로 이제 나타난다고 하면",
                "speaker": "Speaker 1",
                "timestamp": "00:43:19"
            },
            {
                "text": "마이너스 15와 마이너스 25만큼 이동한 데에서 이제 가장 유사도 값이 크게 나타나겠죠",
                "speaker": "Speaker 1",
                "timestamp": "00:43:26"
            },
            {
                "text": "0에 크게가 아니 0에 가깝게 나타나겠죠 이 부분이. 그래서 이런 식으로 이제 등고선 형태로 나타나서 표현할 수 있다",
                "speaker": "Speaker 1",
                "timestamp": "00:43:34"
            },
            {
                "text": "정도만 이해하시면 될 것 같아요 이런 식으로. 그래서 이제 뭐야",
                "speaker": "Speaker 1",
                "timestamp": "00:43:43"
            },
            {
                "text": "절대값 취하는",
                "speaker": "Speaker 1",
                "timestamp": "00:43:53"
            },
            {
                "text": "그냥 아까 전에 제목 하는 거 대신에 절대값을 취해가지고 비교한다라고 그냥 보시면 될 것 같아요. 그래서 추가적으로 그건 뭐 그림이나 설명을 따로 드리지는 않을 거고",
                "speaker": "Speaker 1",
                "timestamp": "00:43:55"
            },
            {
                "text": "이번에는 아까 전에 마지막에 드렸던 NCC 그 부분은 이제 이산화된 y는 a 플러스 b라는 식을 통해서",
                "speaker": "Speaker 1",
                "timestamp": "00:44:05"
            },
            {
                "text": "두 이미지를 이제 픽셀의 이미지를 이 사나에서 10으로 나타낼 수 있을 때 나타낼 수 있을 때 비교한다라고 하는데 그래서 그냥",
                "speaker": "Speaker 1",
                "timestamp": "00:44:15"
            },
            {
                "text": "이런 식으로 각각 a에 대해서 b에 대해서 매핑되는 점들을 이제 곱하고",
                "speaker": "Speaker 1",
                "timestamp": "00:44:25"
            },
            {
                "text": "a 곱한 걸 더 하고 BB 곱한 걸 더 하고 그다음에 이제 그거에 대해서 이런 최종적인 식으로 노트를 이제 두 개를 곱한 거에 대해서 노트를 취하고 a b를",
                "speaker": "Speaker 1",
                "timestamp": "00:44:32"
            },
            {
                "text": "이제 a b에 대해서 나는 거를 통해서 그냥 이런 식으로 유사도를 측정한다까지만 이해하시면 될 것 같아요.",
                "speaker": "Speaker 1",
                "timestamp": "00:44:45"
            },
            {
                "text": "이산화 식으로 어떤 식으로 구해서 그거에 대해서 어떻게 할 건지 그런 것까지 여러분들이 다 세세하게 알 필요는 없고 그냥 최종적으로 이것도 결국에",
                "speaker": "Speaker 1",
                "timestamp": "00:44:52"
            },
            {
                "text": "어느 정도 차이가 나는데 비교를 해야 되는 겁니까? 이런 식으로 통해서 이제 비교를 한다 정도만 이해하시면 될 것 같아요.",
                "speaker": "Speaker 1",
                "timestamp": "00:45:01"
            },
            {
                "text": "그래서 이것도 이제 아까 전에 비교했을 때 영포마 영에서 이제 요거는 이제 마이너스 1 값일",
                "speaker": "Speaker 1",
                "timestamp": "00:45:10"
            },
            {
                "text": "이거는 이제 0이 아니라 이 두 개의 영상을 비교했을 때 아까 전에 두 개의 이제 재고차나",
                "speaker": "Speaker 1",
                "timestamp": "00:45:19"
            },
            {
                "text": "전제값을 취했을 때는 두 개 영상 차를 구하면 0에 가까워질수록 수령한다고 했었죠 얘는 이거를 구해서 구하면은 이제 마이너스 1일",
                "speaker": "Speaker 1",
                "timestamp": "00:45:27"
            },
            {
                "text": "수렴한다라고 보시면 될 것 같아요.",
                "speaker": "Speaker 1",
                "timestamp": "00:45:37"
            },
            {
                "text": "이 값을 포함한 두 영상이 완전히 똑같다면 마이너스 세일에 가깝다라고 보시면 될 것 같아요. 그래서 마이너스 세일에 가깝게 수령되는",
                "speaker": "Speaker 1",
                "timestamp": "00:45:40"
            },
            {
                "text": "값을 구하는 식으로 접근을 해서 반복한다라고 보시면 될 것 같아요. 이동하는",
                "speaker": "Speaker 1",
                "timestamp": "00:45:48"
            },
            {
                "text": "그래서 트랜슬레이션 된 부분에 대해서도 이런 식으로 적용을 해서 아까 전에 유사도 비교도 똑같이 했을 때 이런 식으로",
                "speaker": "Speaker 1",
                "timestamp": "00:45:57"
            },
            {
                "text": "이동된 만큼 그래서 이제 유사도 척도를 비교를 할 때 이제 대칭되는 점을 찾아가지고 유사도를 비교하는",
                "speaker": "Speaker 1",
                "timestamp": "00:46:08"
            },
            {
                "text": "제일 중요하겠죠 이게 어디에 대칭되는지 어디 매핑이 되는지 그걸 알지 못하면 결국에 비교를 못하는 거잖아요 최종적으로. 그래서",
                "speaker": "Speaker 1",
                "timestamp": "00:46:17"
            },
            {
                "text": "이런 식으로 색깔 종류가 4개가 있을 때 상대에 대해서도 4개에 대해서 각각",
                "speaker": "Speaker 1",
                "timestamp": "00:46:26"
            },
            {
                "text": "매핑을 시켜줬을 때 비교를 할 수 있다 정도 이해하시면 되는 거고 근데 이런 식으로 이제",
                "speaker": "Speaker 1",
                "timestamp": "00:46:35"
            },
            {
                "text": "대응되는 바퀴 값이 12개까지 4개 4개였는데 12개의 방향으로 내서 이제 12개까지 비교를 하겠다.",
                "speaker": "Speaker 1",
                "timestamp": "00:46:44"
            },
            {
                "text": "그러면 이제 과정 계산 과정이 복잡해지고 이제 어느 게 어디에 매핑되는지 찾지 못하니까 계속 혼동돼서 수용하지 못하고 복잡해지",
                "speaker": "Speaker 1",
                "timestamp": "00:46:52"
            },
            {
                "text": "있어요. 그래서 최종적으로 매핑은 매핑이 제대로 안 될지라도 적으면 적을수록 좋다라고 보시면 될 것 같아요.",
                "speaker": "Speaker 1",
                "timestamp": "00:47:01"
            },
            {
                "text": "그래서 각각에 대해서 하나만 딱 매핑될 수 있게 매핑을 시켜야 된다. 대응되는 점들을 1대 1로 매핑될 수 있게 해야 된다 정도만 이해하시면 될 것 같아요.",
                "speaker": "Speaker 1",
                "timestamp": "00:47:11"
            },
            {
                "text": "그래서 이제 아까 전에 유사도 측정하는 부분에 대해서 이제 머추얼 인포메이션 부분인데 이거는",
                "speaker": "Speaker 1",
                "timestamp": "00:47:22"
            },
            {
                "text": "까 이제 다중 모달리티를 비교할 때가 있다.",
                "speaker": "Speaker 1",
                "timestamp": "00:47:32"
            },
            {
                "text": "이제 CT와 mr mr과 CT 이런 거를 비교할 때 적용한다고 볼 수 있다고 했었죠 그래서 이제 엔트로피",
                "speaker": "Speaker 1",
                "timestamp": "00:47:38"
            },
            {
                "text": "여러분들은 이거 과정 자체를 전부 이해하실 필요 없어요. 그니까 엔트로피 a를 구하고 엔트로피 b를 구한 다음에 조인트 ab를 구해가지고 이거를 뺀다.",
                "speaker": "Speaker 1",
                "timestamp": "00:47:47"
            },
            {
                "text": "그래가지고 그걸 구했을 때 이게 얼라인먼트가 이제 잘 되면은 엔트로피가",
                "speaker": "Speaker 1",
                "timestamp": "00:47:57"
            },
            {
                "text": "이 얼라인먼트가 제대로 이제 정합이 제대로 안 되면 엔트로피 값이 올라가고 만약에 정합이 잘 되면 엔트로피 값이 낮게 나오는",
                "speaker": "Speaker 1",
                "timestamp": "00:48:03"
            },
            {
                "text": "그걸로 통해서 정합을 이어나간다. 정도만 이제 여러분들 이해하시면 될 것 같아요. 더 이고 더 설명 들어가면 머리들",
                "speaker": "Speaker 1",
                "timestamp": "00:48:11"
            },
            {
                "text": "복잡해서 이해가 안 되실 것 같아서 그냥 아까 전에 말씀드렸던 그 부분까지만 이해하시면 될 것 같아요.",
                "speaker": "Speaker 1",
                "timestamp": "00:48:20"
            },
            {
                "text": "그러고 이제 오차 이제 오차를 최소화하기 위해서 이제 최적화하는 이 오차 값이 어디에",
                "speaker": "Speaker 1",
                "timestamp": "00:48:27"
            },
            {
                "text": "근사할까 이제 추적하는 방법이라고 생각하시면 될 것 같아요. 최적화해 나가면서 이제 어디에 수렴을 하는지 찾아가는 방법인데 이제",
                "speaker": "Speaker 1",
                "timestamp": "00:48:35"
            },
            {
                "text": "가장 많이 쓰이는 그래디언트하고 디센트 이용한 그래디언트 디센트 이용한 부분까지만 설명을 드릴게요. 다른 것들은",
                "speaker": "Speaker 1",
                "timestamp": "00:48:44"
            },
            {
                "text": "혹시 궁금하신 분들은 찾아보시면 될 것 같아요 저거는. 그래서 아까 전에 기울기 값을 구해가지고",
                "speaker": "Speaker 1",
                "timestamp": "00:48:51"
            },
            {
                "text": "변환하는 인자에 대한 리분을 한다고 적용을 했었죠 그다음에 그거에 대해서 0이 되는 값이 됐을",
                "speaker": "Speaker 1",
                "timestamp": "00:49:01"
            },
            {
                "text": "0이 되는 값을 했을 때 이제 그게 가장 최적의 회가 일 확률이 높다라고 설명을 드렸었는데",
                "speaker": "Speaker 1",
                "timestamp": "00:49:10"
            },
            {
                "text": "그 부분을 이제 여기서 또 적용한다고 보시면 될 것 같아요. 그래서 이제 비분을 적용을 해서",
                "speaker": "Speaker 1",
                "timestamp": "00:49:18"
            },
            {
                "text": "변화하는 이자에 대해서 기본을 적용을 해서 이제 기울기 값을 계산을 하는 건데 여기는 이제 단순히 0만 따지는 게 아니라",
                "speaker": "Speaker 1",
                "timestamp": "00:49:24"
            },
            {
                "text": "그 변하 인자에 대해서 기울기 값을 구하고 그 기울기 값이 만약에 3이 나왔다 그러면",
                "speaker": "Speaker 1",
                "timestamp": "00:49:31"
            },
            {
                "text": "그 기울기 값에 음의 방향으로 3의 반대 방향으로 만 인자를 바꿔가지고 이제 조금씩",
                "speaker": "Speaker 1",
                "timestamp": "00:49:39"
            },
            {
                "text": "이 수렴해 나간다라고 보시면 될 것 같아요. 여러분들이 혹시나 딥러닝을 공부하셨다라면 디센트 개념 이제",
                "speaker": "Speaker 1",
                "timestamp": "00:49:46"
            },
            {
                "text": "그래디언트 디센트 이제 계산하는 부분이 이제 어느 정도 이해가 되시긴 할 거예요. 식은 여러분들이",
                "speaker": "Speaker 1",
                "timestamp": "00:49:55"
            },
            {
                "text": "그냥 이런 게 있구나 정도만 이해하시면 돼요. 이걸 외우실 필요는 없어요. 그래서 이미지 자체에 대해서 엑셀",
                "speaker": "Speaker 1",
                "timestamp": "00:50:03"
            },
            {
                "text": "x에 대해서 미분하고 y에 대해서 미분해서 움직이는 영상에 대해서 미리 미분을 해서 계산을 해놓은 다음에 그거에 대해서 이제 추가적으로 계산을",
                "speaker": "Speaker 1",
                "timestamp": "00:50:10"
            },
            {
                "text": "하는 걸 좀 줄일 수 있다 이 정도 생각하시면 되는 거 같고 그래서",
                "speaker": "Speaker 1",
                "timestamp": "00:50:20"
            },
            {
                "text": "아까 전에 미리 미분을 해놔가지고 x에 대해서 미리 미분 y에 대해서 미리 미분을 해놔가지고 각각의 이미지를 구해놨어요. 그래서 이 이미지를 통해서",
                "speaker": "Speaker 1",
                "timestamp": "00:50:27"
            },
            {
                "text": "이제 그래디언트 계산을 했을 때 이제 비교를 할 때 미리 미분해 놓은 게 계산 과정이 좀 더 편하고 간단하다 정도만 아시면 될 것 같아요. 그래서",
                "speaker": "Speaker 1",
                "timestamp": "00:50:37"
            },
            {
                "text": "이제 행렬에 대해서 각각에 대해서 이제 이제 미분을 적용을 하면 2바이사 행렬로 이런 식으로 해서 이제",
                "speaker": "Speaker 1",
                "timestamp": "00:50:48"
            },
            {
                "text": "값을 나타낼 수 있다 정도만 여러분들이 이해하시면 될 것 같아요. 여기서 이 각각의 값들에 대해서 그냥",
                "speaker": "Speaker 1",
                "timestamp": "00:50:57"
            },
            {
                "text": "이분을 적용하면 이 바이타 행렬로 이런 식으로 나타낼 수 있다 정도만 이해하시면 될 것 같고 여기서",
                "speaker": "Speaker 1",
                "timestamp": "00:51:05"
            },
            {
                "text": "그래서 이제 기울기가 0이 아까 전에 0이 될 때 수렴이 된다고 했죠 그래서 이제 그거를 찾아나가는 과정이에요 얘는. 그래서",
                "speaker": "Speaker 1",
                "timestamp": "00:51:13"
            },
            {
                "text": "이제 이제 이 등고선을 보시면 이 등고선이 이제",
                "speaker": "Speaker 1",
                "timestamp": "00:51:24"
            },
            {
                "text": "같은 기우기 값을 가지고 있는 애들을 이제 같은 등고선으로 묶었다라고 보시면 될 것 같아요. 그래서",
                "speaker": "Speaker 1",
                "timestamp": "00:51:33"
            },
            {
                "text": "여러분들은 딥러닝은 혹시나 어디서 수업을 들어보셨다면 이해하실 수 있겠는데",
                "speaker": "Speaker 1",
                "timestamp": "00:51:40"
            },
            {
                "text": "이 조금씩 계속 이제 내려가면서 깎아 내려가면서 수렴하는 값을 찾아 나가는 거예요. 그래서 이제 아까 전에 그레디언트를 구했을",
                "speaker": "Speaker 1",
                "timestamp": "00:51:45"
            },
            {
                "text": "그레디언트에 역 방향으로 이제 적용을 해 나가면서 이제 조금씩 내려가면서 이제",
                "speaker": "Speaker 1",
                "timestamp": "00:51:56"
            },
            {
                "text": "기울린 값이 0에 해당되는 부분을 추적해 나간다 정도만 이해하시면 될 것 같아요. 그래서",
                "speaker": "Speaker 1",
                "timestamp": "00:52:03"
            },
            {
                "text": "이 최적을 찾아서 나가는데 이거에 대해서 이 그래디언트 값을 이제 각 어느 정도씩",
                "speaker": "Speaker 1",
                "timestamp": "00:52:13"
            },
            {
                "text": "이제 변경을 해 주면서 내려갈 건지 이거를 너무 변경 값을 너무 크게 그레디언트 값을",
                "speaker": "Speaker 1",
                "timestamp": "00:52:23"
            },
            {
                "text": "뭐 7, 8, 10 이렇게 어느 그 성수가 나타나고 하면 3수로 나타났을 때 7, 80 이렇게 나온다고 했을",
                "speaker": "Speaker 1",
                "timestamp": "00:52:34"
            },
            {
                "text": "40, 50, 60 이런 식으로 여러분들이 뭐 크게 값을 한다면 수렴에 나갈 때 찾는 게 좀 복잡해지겠죠",
                "speaker": "Speaker 1",
                "timestamp": "00:52:42"
            },
            {
                "text": "근데 그 반면에 오히려 너무 작아도 오히려 수렴해서 찾아나가는 과정에 너무 많은 시간을 적용할 수 있다는",
                "speaker": "Speaker 1",
                "timestamp": "00:52:51"
            },
            {
                "text": "그래서 여러분들이 최적의 그래디언트 값을 구해가지고 그만큼 그래디언트의 역 방향만큼",
                "speaker": "Speaker 1",
                "timestamp": "00:53:00"
            },
            {
                "text": "차를 해가지고 이동을 하면서 조금씩 0에 수렴되는 값을 찾아가서 그거에 대해서 수렴하는 걸 찾아간다 정도로 생각하시면 될 것 같아요.",
                "speaker": "Speaker 1",
                "timestamp": "00:53:08"
            },
            {
                "text": "이제 계속 이렇게 수렴하는 부분에 대해서 역 방향으로 조금씩 이동해 나가는 거고 그러고 이거는 이제 그레디언트로 계산을 할",
                "speaker": "Speaker 1",
                "timestamp": "00:53:24"
            },
            {
                "text": "최대한 이 노란색 같은 형태 이렇게 이렇게 형태가 좀 동그랗게 이렇게 너스름하게 생긴 거보다는",
                "speaker": "Speaker 1",
                "timestamp": "00:53:34"
            },
            {
                "text": "이렇게 생긴 게 아무래도 그레이지 어트 계산할 때 여기에 대해서 최적 부분을 찾기가",
                "speaker": "Speaker 1",
                "timestamp": "00:53:44"
            },
            {
                "text": "아무래도 더 쉽겠죠 이렇게 넓게 돼 있는 거보다 그래서 이런 게 이제 최적하기 좋다 정도 그림으로 나타낸 거고",
                "speaker": "Speaker 1",
                "timestamp": "00:53:51"
            },
            {
                "text": "그래서 이 그레디언트 값을 구할 때 그 마이너스 차만큼 구할 때 이거를 이제 최적화를 하기 위해서",
                "speaker": "Speaker 1",
                "timestamp": "00:53:59"
            },
            {
                "text": "이제 기울기 값이 이제 계속 이제 0에 수렴하는 걸 찾아가는 거니까 처음에는 값이 크겠죠 근데 이제 이제",
                "speaker": "Speaker 1",
                "timestamp": "00:54:08"
            },
            {
                "text": "그 차이만큼 줄여 나갈수록 이제 그레디언트 값을 계속 계산을 했을 때 점점 작아지겠죠 그러면 그 작아지는 비율만큼 구하는",
                "speaker": "Speaker 1",
                "timestamp": "00:54:18"
            },
            {
                "text": "이 차를 드레기언트 역방향 값을 조금씩 줄여나가면서 적용을 해야지 좀 더 쉽게 최적의 방향을 찾을 수 있다",
                "speaker": "Speaker 1",
                "timestamp": "00:54:27"
            },
            {
                "text": "라는 걸 이제 그림으로 나타낸 거고 그래서",
                "speaker": "Speaker 1",
                "timestamp": "00:54:37"
            },
            {
                "text": "이제 아까 전에 이제 평균 제곱 차이를 구하는 걸로 했을 때 그래디언트를 구했을 때 이제 이 이동하는 값을",
                "speaker": "Speaker 1",
                "timestamp": "00:54:45"
            },
            {
                "text": "1ml로 이제 그레디언트 값을 1ml로 줬을 때 그 역 방향 값을 1ml 값으로 줬을 때 이런 식으로 찾아가다가 이제",
                "speaker": "Speaker 1",
                "timestamp": "00:54:54"
            },
            {
                "text": "계속 이동 값이 너무 작아가지고 수렴해서 최종 0으로 가기를 힘들었다라는 걸 이제 보여주는 거고",
                "speaker": "Speaker 1",
                "timestamp": "00:55:03"
            },
            {
                "text": "이제 2는 됐을 때 그래도 어느 정도 0에 대해서 찾아가긴 했는데 그래도 값이 너무 작죠",
                "speaker": "Speaker 1",
                "timestamp": "00:55:12"
            },
            {
                "text": "그래서 이런 식으로 이제 어떤 얼마큼 값을 주냐에 따라서 이제 찾아갈 수 있는 최적의 값을",
                "speaker": "Speaker 1",
                "timestamp": "00:55:20"
            },
            {
                "text": "찾아갈 수 있다. 아니면 너무 크게 주면 오히려",
                "speaker": "Speaker 1",
                "timestamp": "00:55:28"
            },
            {
                "text": "똥충똥충 뛰면서 잘못된 값으로 찾아갈 수도 있긴 하지만 여기는 일단 찾아가기는 했는데 값을 줄였으니까 조금씩 그래서",
                "speaker": "Speaker 1",
                "timestamp": "00:55:32"
            },
            {
                "text": "그래디언트 값을 이용해가지고 그거에 대해서 역 방향으로 구해가지고 구한다 정도만",
                "speaker": "Speaker 1",
                "timestamp": "00:55:40"
            },
            {
                "text": "아시면 될 것 같아요. 그래서 그 차 역차를 구할 때는 최적의 방법으로 어떤 식으로 줄여 나갈지",
                "speaker": "Speaker 1",
                "timestamp": "00:55:46"
            },
            {
                "text": "그래서 이번에는 이제 매핑에 대해서 설명을 드리는 건데 그냥 단순하게 그냥 생각하면 이제",
                "speaker": "Speaker 1",
                "timestamp": "00:55:52"
            },
            {
                "text": "그냥 영상 자체 해상도를 그냥 따졌을 때 저희는 이제 1024 이 10204 정도라고 생각하시면은 그거에 대해서 각각 XY 값을",
                "speaker": "Speaker 1",
                "timestamp": "00:56:03"
            },
            {
                "text": "이제 샘플링 해가지고 124 곱하기 124 만큼의 픽셀을 가지고 있다라고 그냥 단순하게 계산을 할 수 있잖아요. 그것만큼 이제 얘는",
                "speaker": "Speaker 1",
                "timestamp": "00:56:13"
            },
            {
                "text": "이제 픽셀 값의 범위를 어느 정도로 줘가지고 이미지를",
                "speaker": "Speaker 1",
                "timestamp": "00:56:23"
            },
            {
                "text": "이제 간격을 어느 정도 줘가지고 픽셀 값을 부여할 건지라고 생각하시면 될 것 같아요. 샘플링 하는 과정을 그래서 그 과정을 이제",
                "speaker": "Speaker 1",
                "timestamp": "00:56:27"
            },
            {
                "text": "x만큼의 범위를 이제",
                "speaker": "Speaker 1",
                "timestamp": "00:56:37"
            },
            {
                "text": "sx y만큼은 x y로 해가지고 각각의 픽셀 값에 대해서 샘플링을 해가지고 이미지를 만들었다라고 보시면 될 것 같아요.",
                "speaker": "Speaker 1",
                "timestamp": "00:56:39"
            },
            {
                "text": "그래서 이런 식으로 좀 얘는 좀 크게 했죠 크게 크게 좀 말이 안 될 정도로 그래서 각각의 픽셀 값에 해당하는 값을",
                "speaker": "Speaker 1",
                "timestamp": "00:56:49"
            },
            {
                "text": "이 픽셀 값을 적용해서 만들 수 있다. 그래서 그렇게 보시면 될 것 같고",
                "speaker": "Speaker 1",
                "timestamp": "00:56:58"
            },
            {
                "text": "그래서 그 각각에 대응되는 픽셀 값 좌표 값을 구할 수 있고 그리고 이제 여러분들이 이제",
                "speaker": "Speaker 1",
                "timestamp": "00:57:06"
            },
            {
                "text": "이게 물리 자표계고 이제 이 이제 실제 자표계로 바꾸고 물리자표계에서 이런 식으로 했을",
                "speaker": "Speaker 1",
                "timestamp": "00:57:16"
            },
            {
                "text": "이런 식을 통해서 이제 여러분들이",
                "speaker": "Speaker 1",
                "timestamp": "00:57:26"
            },
            {
                "text": "이제 물리적 표기를 실제 적 표기로 바꾸고 실제적 표기는 다시 물리적 표기로 이런 식으로 변환할 수 있는 식이 있다 정도만 이해했으면 될 것 같아요. 여러분들이 이 식을",
                "speaker": "Speaker 1",
                "timestamp": "00:57:29"
            },
            {
                "text": "적용을 해서 구하려고 할 것까지는 아무래도 없을 것 같긴 해요. 웬만하면 두 개 이미지 잡혀 개가 맞는 걸 가지고",
                "speaker": "Speaker 1",
                "timestamp": "00:57:39"
            },
            {
                "text": "정합을 할 테니까. 그래서 만약에 두 개 이미지가 이제 이제 샘플 된 과정이 이제 샘플 된 값이 이제 실제 적표계로 바뀌었을 때 이게",
                "speaker": "Speaker 1",
                "timestamp": "00:57:47"
            },
            {
                "text": "그 범위가 더 클 수도 있고 어떨 때는 더 작을 수도 있고 그거를 통해서 이제 샘플 되는 값들을 균일하게 맞춰준 다음에 작업을 어느 정도 해야 된다라고 해가지고",
                "speaker": "Speaker 1",
                "timestamp": "00:58:00"
            },
            {
                "text": "잡표의 변환을 해가지고 그것까지 들어가야 된다라는 개념인데 여러분들은",
                "speaker": "Speaker 1",
                "timestamp": "00:58:10"
            },
            {
                "text": "그런 것까지 깊게 할 필요 없을 것 같으니까 그냥 이런 식이 있다 좌표의 변환을 할 수 있다 정도만 이해하시면 될 것 같아요. 그래서 이제 서브 샘플링이라는 거는",
                "speaker": "Speaker 1",
                "timestamp": "00:58:17"
            },
            {
                "text": "이 샘플 된 값을 이제 더 작게 간격을 더 크게 해가지고 하는 샘플링이라고 보시면 될 것 같아요.",
                "speaker": "Speaker 1",
                "timestamp": "00:58:27"
            },
            {
                "text": "그냥 이론적으로. 그래가지고 간격을 더 크게 해가지고 샘플 값을 더 더 더 적게 추출한다 정도만 이해하시면 될 것 같고",
                "speaker": "Speaker 1",
                "timestamp": "00:58:36"
            },
            {
                "text": "보시면 간격이 늘어났다. 그러고 슈퍼 샘플링이라는 거는",
                "speaker": "Speaker 1",
                "timestamp": "00:58:45"
            },
            {
                "text": "이 반대로 아까 서브 샘플링과 반대로 이제 샘플링의 간격을 더 좁게 해가지고 더 많은",
                "speaker": "Speaker 1",
                "timestamp": "00:58:50"
            },
            {
                "text": "샘플 값을 뽑아내가지고 픽셀 값을 만들어냈다 정도만 보시면 될 것 같아요. 그래서 슈퍼 샘플링은 그렇다 정도로 이름만 보시면 될 것 같아요.",
                "speaker": "Speaker 1",
                "timestamp": "00:58:58"
            },
            {
                "text": "그래서 잡쪽의 변환을 통해서 정합을 해야 되는 건데 이것까지 뭐 여러분들이 이제 깊게 정합을",
                "speaker": "Speaker 1",
                "timestamp": "00:59:09"
            },
            {
                "text": "일은 없을 것 같아요. 실제 자표기까지 물리자 표기하고 이런 거 전환을 하면서 그래서",
                "speaker": "Speaker 1",
                "timestamp": "00:59:19"
            },
            {
                "text": "그런 식으로 이제 원래 정합을 할 때 그런 식으로 좌표의 변환까지 하면서 둘이 대칭되는 점을 확인을 해야 된다 정도만 이해하시면 될 것 같아요. 그러고",
                "speaker": "Speaker 1",
                "timestamp": "00:59:25"
            },
            {
                "text": "이제 로테이션이 들어갈 때는 이제 중심점에 대해서 로테이션이 돌아가야 된다는 점 물체의 오브젝트 그래서 이 중심점을 0코마 0으로",
                "speaker": "Speaker 1",
                "timestamp": "00:59:36"
            },
            {
                "text": "두 개에 대해서 비교를 할 때 두 개 다 같은 중심점으로 이동을 시켜서 로테이션을 돌리거나 아니면 가장",
                "speaker": "Speaker 1",
                "timestamp": "00:59:47"
            },
            {
                "text": "많이 사용하는 까 가장 일반적인 방법은",
                "speaker": "Speaker 1",
                "timestamp": "00:59:57"
            },
            {
                "text": "두 개 오브젝트를 중심점을 영포마 0으로 이동을 시켜요. 영포마 0으로 이동을 시켜서 그다음에 로테이션을 적용해야지 안 그러면 여기서 로테이션 이거를 중심적으로 로테이션을 돌리면",
                "speaker": "Speaker 1",
                "timestamp": "01:00:02"
            },
            {
                "text": "여기를 중심으로 로테이션을 돌리면 이거에 따라서 로테이션 되는 값이 달라지겠죠 그러니까 중심점을 기준으로 로테이션을 돌려야 된다. 정도만 기억하시면 될 것 같아요 이 부분은",
                "speaker": "Speaker 1",
                "timestamp": "01:00:14"
            },
            {
                "text": "그래서 중심점을 기준으로 로테이션을 돌렸다 정도 이해하시면 될 것 같아요. 그래서 오늘 수업은.",
                "speaker": "Speaker 1",
                "timestamp": "01:00:28"
            }
        ],
        "speaker": [
            "Speaker 1"
        ]
    }
}